{"version":3,"sources":["data/ImportantValues.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","components/VaccineStatisticsCompactCard.js","components/VaccineStatisticsCompact.js","assets/logo.png","utils/compute_utils.js","components/PredictedTimeline.js","App.js","reportWebVitals.js","index.js"],"names":["TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","CustomBarLabel","x","y","fill","value","width","viewBox","height","dx","dy","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","parsedData","data","length","ResponsiveContainer","BarChart","layout","margin","top","right","left","bottom","XAxis","type","domain","hide","YAxis","tick","Legend","verticalAlign","align","wrapperStyle","paddingLeft","formatter","entry","index","Bar","dataKey","background","label","isAnimationActive","ReferenceLine","stroke","strokeDasharray","Label","position","fontSize","fontStyle","CustomizedAxisTick","payload","moment","format","DailyRatesPlot","aspect","ComposedChart","CartesianGrid","date","tickFormatter","Intl","NumberFormat","Text","offset","angle","Tooltip","name","stackId","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","Card","fluid","Content","Header","Meta","Description","textAlign","extra","Icon","VaccineStatisticsCompactCard","mainFigure","dayOnDay","dayOnDayPercent","weekOnWeek","weekOnWeekPercent","dataToPlot","disableDeltaRounding","compact","Statistic","size","Value","color","Math","round","filter","item","VaccineStatisticsCompact","showTweets","useState","loaded","setLoaded","allDosesStatistics","setAllDosesStatistics","firstDosesStatistics","setFirstDosesStatistics","secondDosesStatistics","setSecondDosesStatistics","useEffect","latestIndex","total","totalDayOnDay","totalDayOnDayPercent","totalWeekOnWeek","totalWeekOnWeekPercent","new","newDayOnDayPercent","newDayOnDay","newWeekOnWeek","newWeekOnWeekPercent","completedCourses","completedCoursesWeekOnWeek","completedCoursesDayOnDay","sevenDaysRate","sevenDaysRateDayOnDay","sevenDaysRateDayOnDayPercent","sevenDaysRateWeekOnWeek","sevenDaysRateWeekOnWeekPercent","adultPopulationDone","adultPopulationDoneDayOnDay","adultPopulationDoneWeekOnWeek","priorityGroupsDone","priorityGroupsDoneDayOnDay","priorityGroupsDoneWeekOnWeek","Grid","Row","Segment","repeat","ceil","subtract","abs","basic","as","dividing","Group","style","marginBottom","Progress","percent","progress","marginTop","locale","computeAverageRate","days","fromKey","toKey","forEach","datum","_","mean","slice","a","PredictedTimeline","debtData","App","setShowTweets","setParsedData","updateDate","setUpdateDate","setDebtData","setWeeklyDebtData","rateForPredictions","setRateForPredictions","currentRateForPredictions","setCurrentRateForPredictions","location","useLocation","URLSearchParams","search","get","rawData","vaccination_json","sort","b","Date","latestDate","add","RATE","sevenDaysRateSecond","debtData_","startDate","i","clone","secondDosesDone","firstDosesDone","secondDosesCarryOverFromPreviousDay","secondDosesNewFromDay","spareCapacity","secondDosesDue","cumFirstDoses","cumSecondDoses","week","keys","Object","DaysDifference","diff","SecondDosesToAddPerDay","targetDate","newPeopleVaccinatedFirstDoseByPublishDate","allDosesRate","carryOver","cumPeopleVaccinatedFirstDoseByPublishDate","cumPeopleVaccinatedSecondDoseByPublishDate","maxDoses","dateAllFirstDosesDone","entries","console","log","maxSecondDoses","min","max","debtDataToPlot","push","fieldsToAverage","weeklyData","minWeek","maxWeek","filteredData","weekData","field","meanBy","startOf","convertToWeeklyData","className","Container","Image","src","logo","circular","bordered","Subheader","Message","info","href","raised","List","bulleted","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5745e97.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 53000000;\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-07-31\"; // Based on new target https://news.sky.com/story/covid-19-all-adults-to-be-offered-vaccine-by-end-of-july-under-pms-accelerated-plan-12224309\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={135}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 30,\n            right: 0,\n            left: 0,\n            bottom: 30,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            layout=\"horizontal\"\n            height={20}\n            align=\"center\"\n            wrapperStyle={{\n              top: 0,\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" aspect={2.5}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n}) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst VaccineStatisticsCompactCard = ({\n  title,\n  description,\n  mainFigure,\n  dayOnDay,\n  dayOnDayPercent,\n  weekOnWeek,\n  weekOnWeekPercent,\n  dataToPlot,\n  disableDeltaRounding,\n}) => {\n  const getDayOnDay = () => {\n    if (dayOnDay)\n      return (\n        <Fragment>\n          {dayOnDay > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Day: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(dayOnDay.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(dayOnDay))}</b>\n          )}\n          {dayOnDayPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(dayOnDayPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n          <br />\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getWeekOnWeek = () => {\n    if (weekOnWeek)\n      return (\n        <Fragment>\n          {weekOnWeek > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Week: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(weekOnWeek.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(weekOnWeek))}</b>\n          )}\n          {weekOnWeekPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(weekOnWeekPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getPlot = () => {\n    if (dataToPlot) {\n      dataToPlot = dataToPlot.filter(\n        (item) => item.data != null && item.data != 0\n      );\n\n      return (\n        <BarChart\n          width={250}\n          height={50}\n          data={dataToPlot}\n          margin={{\n            top: 10,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"date\" hide={true} />\n          <Tooltip\n            formatter={(value, name) => {\n              return [new Intl.NumberFormat(\"en\").format(value)];\n            }}\n          />\n          <Bar type=\"monotone\" dataKey=\"data\" fill=\"#8884d8\" />\n        </BarChart>\n      );\n    } else return null;\n  };\n\n  return (\n    <Card textAlign=\"left\" compact>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>\n          <Statistic size=\"tiny\">\n            <Statistic.Value>{mainFigure}</Statistic.Value>\n          </Statistic>\n        </Card.Description>\n\n        <Card.Description>\n          {getDayOnDay()}\n          {getWeekOnWeek()}\n          {getPlot()}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default VaccineStatisticsCompactCard;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst VaccineStatisticsCompact = ({ parsedData, showTweets, dateUpdated }) => {\n  const [loaded, setLoaded] = useState(null);\n\n  const [allDosesStatistics, setAllDosesStatistics] = useState(null);\n  const [firstDosesStatistics, setFirstDosesStatistics] = useState(null);\n  const [secondDosesStatistics, setSecondDosesStatistics] = useState(null);\n\n  useEffect(() => {\n    if (parsedData) {\n      const latestIndex = parsedData.length - 1;\n\n      setAllDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        completedCourses:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        completedCoursesWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        completedCoursesDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        sevenDaysRate:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n          1,\n      });\n\n      setFirstDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n\n      setSecondDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n      setLoaded(true);\n    }\n  }, [parsedData]);\n\n  if (loaded)\n    return (\n      <Grid>\n        <Grid.Row>\n          {showTweets && (\n            <Fragment>\n              <Segment textAlign=\"left\">\n                📈{moment(dateUpdated).format(\"DD MMMM\")} Progress Tracker📈\n                <br />\n                <br />\n                1️⃣ 1st Dose\n                <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(firstDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                )}{\" \"}\n                {(firstDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                2️⃣ 2nd Dose <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                #vaccine\n              </Segment>\n              <Segment textAlign=\"left\">\n                1️⃣ First Doses Update on {moment(dateUpdated).format(\"DD MMMM\")}{\" \"}\n                📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 1st Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.total)}\n                <br />\n                <br />\n                {firstDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {firstDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    firstDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n              <Segment textAlign=\"left\">\n                2️⃣ Second Doses Update on{\" \"}\n                {moment(dateUpdated).format(\"DD MMMM\")} 📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 2nd Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.total)}\n                <br />\n                <br />\n                {secondDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {secondDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    secondDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n            </Fragment>\n          )}\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>💉 Overall Progress</Header.Content>\n            </Header>\n            <Card.Group>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Adult Population</Card.Header>\n                  <Card.Meta>53M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      color=\"blue\"\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneWeekOnWeek *\n                        100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Priority Groups</Card.Header>\n                  <Card.Meta>32M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      color=\"blue\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <VaccineStatisticsCompactCard\n                title=\"Completed Courses\"\n                description=\"Fraction of completed courses\"\n                mainFigure={\n                  (allDosesStatistics.completedCourses * 100).toFixed(1) + \"%\"\n                }\n                dayOnDay={allDosesStatistics.completedCoursesDayOnDay * 100}\n                weekOnWeek={allDosesStatistics.completedCoursesWeekOnWeek * 100}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n                disableDeltaRounding={true}\n              />\n            </Card.Group>\n          </Segment>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ + 2️⃣ All Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"Inoculations so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.total\n                )}\n                dayOnDay={allDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={allDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"Number of new inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.new\n                )}\n                dayOnDay={allDosesStatistics.newDayOnDay}\n                dayOnDayPercent={allDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(allDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={allDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  allDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={allDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  allDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"] + item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ First Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"1st Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.total\n                )}\n                dayOnDay={firstDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.new\n                )}\n                dayOnDay={firstDosesStatistics.newDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={firstDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  firstDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={firstDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  firstDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>2️⃣ Second Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"2nd Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.total\n                )}\n                dayOnDay={secondDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.new\n                )}\n                dayOnDay={secondDosesStatistics.newDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={secondDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  secondDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={secondDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  secondDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n      </Grid>\n    );\n  else return null;\n};\n\nexport default VaccineStatisticsCompact;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import _ from \"lodash\";\nimport moment from \"moment\";\nmoment.locale(\"en-gb\");\n\nexport const computeAverageRate = (data, days, fromKey, toKey) => {\n  data.forEach((datum, index) => {\n    if (index >= 6) {\n      data[index][toKey] = _.mean(\n        data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n      );\n    } else data[index][toKey] = null;\n  });\n\n  return data;\n};\n\nexport const predictDebtIntoFuture = (\n  data,\n  allDosesRate,\n  firstDosesColumn,\n  maxFirstDoses,\n  initialCumFirstDoses,\n  initialCumSecondDoses\n) => {\n  let carryOver = 0;\n  let secondDosesDue = 0;\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n\n  const debtData_ = data.map((datum, index) => {\n    // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n    secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n    let secondDosesDueRecord = secondDosesDue;\n    let carryOverRecord = carryOver;\n\n    let secondDosesDone = 0;\n\n    if (\n      index > 0 &&\n      cumFirstDoses >= maxFirstDoses &&\n      cumSecondDoses <= maxFirstDoses\n    ) {\n      secondDosesDone = allDosesRate;\n    } else {\n      if (secondDosesDue >= allDosesRate) {\n        secondDosesDone = allDosesRate;\n        carryOver = secondDosesDue - allDosesRate;\n      } else {\n        secondDosesDone = secondDosesDue;\n        carryOver = 0;\n      }\n    }\n\n    let spareCapacity = allDosesRate - secondDosesDone;\n    let firstDosesDone = 0;\n\n    if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n      firstDosesDone = spareCapacity;\n\n    secondDosesDue -= secondDosesDue;\n\n    if (index == 0) {\n      if (initialCumFirstDoses && initialCumSecondDoses) {\n        cumFirstDoses = initialCumFirstDoses;\n        cumSecondDoses = initialCumSecondDoses;\n      } else {\n        cumFirstDoses = firstDosesDone;\n        cumSecondDoses = secondDosesDone;\n      }\n    } else {\n      cumFirstDoses += firstDosesDone;\n      cumSecondDoses += secondDosesDone;\n    }\n\n    return {\n      date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: carryOverRecord,\n      secondDosesNewFromDay: datum[firstDosesColumn],\n      spareCapacity: spareCapacity,\n      secondDosesDue: secondDosesDueRecord,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    };\n  });\n\n  return debtData_;\n};\n\nexport const fillDataWithConstantRate = (\n  initialData,\n  daysToFill,\n  rate,\n  cumFirstDosesColumn,\n  cumSecondDosesColumn,\n  maxFirstDoses\n) => {\n  let fillData = [];\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n  let firstDosesDone = 0;\n  let secondDosesDone = 0;\n\n  for (let i = 1; i < daysToFill; i++) {\n    let maxFirstDosesReached = false;\n    let maxSecondDosesReached = false;\n\n    if (i == 1) {\n      if (\n        initialData[initialData.length - 1][cumFirstDosesColumn] >=\n        maxFirstDoses\n      )\n        maxFirstDosesReached = true;\n      if (\n        initialData[initialData.length - 1][cumSecondDosesColumn] >=\n        maxFirstDoses\n      )\n        maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else {\n        console.log(\"Should never reach this\");\n      }\n    } else {\n      if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n      if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumSecondDoses += rate;\n        firstDosesDone = 0;\n        secondDosesDone = rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        // do nothing\n      } else console.log(\"Should never reach this\");\n    }\n\n    fillData.push({\n      date: moment(initialData[initialData.length - 1].date)\n        .add(i, \"day\")\n        .format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: 0,\n      secondDosesNewFromDay: 0,\n      spareCapacity: rate,\n      secondDosesDue: 0,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    });\n  }\n\n  return fillData;\n};\n\nexport const addWeekField = (data) => {\n  return data.map((datum) => {\n    datum.week = moment(datum.date).week();\n    return datum;\n  });\n};\n\nexport const convertToWeeklyData = (data) => {\n  const fieldsToAverage = [\n    \"cumFirstDoses\",\n    \"cumSecondDoses\",\n    \"firstDosesDone\",\n    \"secondDosesDone\",\n    \"spareCapacity\",\n  ];\n\n  const weeklyData = [];\n\n  const minWeek = data[0].week;\n  const maxWeek = data[data.length - 1].week;\n\n  for (let i = minWeek; i <= maxWeek; i++) {\n    const filteredData = data.filter((item) => item.week === i);\n\n    let weekData = {};\n\n    fieldsToAverage.forEach((field) => {\n      weekData[field] = _.meanBy(filteredData, field);\n    });\n\n    weekData[\"week\"] = i;\n\n    weekData[\"weekFirstDay\"] = moment({ y: \"2021\" }) // get first day of the given year\n      .week(i) // get the first week according locale\n      .startOf(\"week\") // get the first day of the week according locale\n      .format(\"YYYY-MM-DD\");\n    weeklyData.push(weekData);\n  }\n\n  return weeklyData;\n};\n","import React from \"react\";\n\nconst PredictedTimeline = ({ parsedData, debtData }) => {\n  return null;\n};\n\nexport default PredictedTimeline;\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n} from \"semantic-ui-react\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport VaccineStatisticsCompact from \"./components/VaccineStatisticsCompact\";\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport { computeAverageRate, convertToWeeklyData } from \"./utils/compute_utils\";\nimport PredictedTimeline from \"./components/PredictedTimeline\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [showTweets, setShowTweets] = useState(false);\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n  const [debtData, setDebtData] = useState(null);\n  const [weeklyDebtData, setWeeklyDebtData] = useState(null);\n  const [rateForPredictions, setRateForPredictions] = useState(null);\n  const [currentRateForPredictions, setCurrentRateForPredictions] = useState(\n    null\n  );\n\n  let location = useLocation();\n\n  useEffect(() => {\n    let showTweetsParam = new URLSearchParams(location.search).get(\n      \"showTweets\"\n    );\n\n    if (showTweetsParam) setShowTweets(true);\n  }, [location]);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  useEffect(() => {\n    if (parsedData) {\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n      const debtData_ = {};\n\n      const startDate = moment(parsedData[parsedData.length - 1].date).add(\n        1,\n        \"days\"\n      );\n\n      // Create structure to hold the debt data\n      for (let i = 0; i < 260; i++) {\n        debtData_[startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\")] = {\n          date: startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\"),\n          secondDosesDone: 0,\n          firstDosesDone: 0,\n          secondDosesCarryOverFromPreviousDay: 0,\n          secondDosesNewFromDay: 0,\n          spareCapacity: 0,\n          secondDosesDue: 0,\n          cumFirstDoses: 0,\n          cumSecondDoses: 0,\n          week: moment(startDate.clone().add(i, \"days\")).week(),\n        };\n      }\n      let keys = Object.keys(debtData_);\n      const endDate = keys[keys.length - 1];\n\n      // Add 2nd doses data from before start of daily data releases\n      // Daily releases started on 2021-01-10\n      // Take the cumulative on\n      const SecondDosesToAdd = 2286572 - 391399;\n      const DaysDifference = Math.abs(\n        moment(\"2020-12-08\").diff(moment(\"2021-01-09\"), \"days\")\n      );\n      const SecondDosesToAddPerDay = SecondDosesToAdd / DaysDifference;\n\n      for (let i = 0; i <= DaysDifference; i++) {\n        let date = moment(\"2020-12-08\").add(i, \"days\");\n        let targetDate = date.add(12, \"weeks\").format(\"YYYY-MM-DD\");\n\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue += SecondDosesToAddPerDay;\n      }\n\n      // Project initial data forward\n      parsedData.map((datum) => {\n        let targetDate = moment(datum[\"date\"])\n          .add(12, \"weeks\")\n          .format(\"YYYY-MM-DD\");\n\n        // Only add if date falls in existing debt data\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue +=\n            datum.newPeopleVaccinatedFirstDoseByPublishDate;\n      });\n\n      let carryOver = 0;\n      let cumFirstDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedFirstDoseByPublishDate;\n      let cumSecondDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate;\n\n      const maxDoses = 53000000;\n\n      let allDosesRate;\n      if (rateForPredictions) allDosesRate = rateForPredictions;\n      else allDosesRate = RATE;\n\n      if (!currentRateForPredictions) {\n        setCurrentRateForPredictions(allDosesRate);\n        setRateForPredictions(allDosesRate);\n      }\n\n      let dateAllFirstDosesDone = null;\n\n      Object.entries(debtData_).forEach((entry, index) => {\n        const [key, value] = entry;\n\n        let secondDosesDue = value.secondDosesDue + carryOver;\n\n        value.carryOver = carryOver;\n\n        console.log(carryOver);\n        console.log(cumFirstDoses - cumSecondDoses);\n        let secondDosesDone = 0;\n        let firstDosesDone = 0;\n\n        // If all first doses done --> prioritize second doses\n        if (cumFirstDoses >= maxDoses && cumSecondDoses <= maxDoses) {\n          // We only start all doses possible after 3 weeks following the last 1st dose administered\n          if (moment(value.date).diff(dateAllFirstDosesDone, \"days\") >= 21) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        } else if (cumSecondDoses <= maxDoses) {\n          // If more doses due that the rate\n          // --> second doses done are equal to the rate\n          if (secondDosesDue > allDosesRate) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        }\n\n        // Never allow second doses to overtake first doses\n        const maxSecondDoses = cumFirstDoses - cumSecondDoses;\n\n        if (cumSecondDoses + secondDosesDone > cumFirstDoses) {\n          secondDosesDone = Math.min(maxSecondDoses, secondDosesDone);\n        }\n\n        carryOver = Math.max(secondDosesDue - secondDosesDone, 0);\n\n        let spareCapacity = Math.max(allDosesRate - secondDosesDone, 0);\n\n        if (spareCapacity > 0 && cumFirstDoses <= maxDoses) {\n          firstDosesDone = spareCapacity;\n\n          let targetDate = moment(value.date)\n            .add(12, \"weeks\")\n            .format(\"YYYY-MM-DD\");\n\n          if (targetDate in debtData_)\n            debtData_[targetDate].secondDosesDue += firstDosesDone;\n          else console.log(targetDate);\n        }\n\n        cumFirstDoses = cumFirstDoses + firstDosesDone;\n        cumSecondDoses = cumSecondDoses + secondDosesDone;\n\n        if (cumFirstDoses >= maxDoses && !dateAllFirstDosesDone)\n          dateAllFirstDosesDone = moment(value.date);\n\n        value.firstDosesDone = firstDosesDone;\n        value.secondDosesDone = secondDosesDone;\n        value.cumFirstDoses = cumFirstDoses;\n        value.cumSecondDoses = cumSecondDoses;\n        // value.secondDosesDue = secondDosesDue;\n      });\n\n      const debtDataToPlot = [];\n\n      for (const [key, value] of Object.entries(debtData_)) {\n        debtDataToPlot.push(value);\n      }\n\n      setDebtData(debtDataToPlot);\n      setWeeklyDebtData(convertToWeeklyData(debtDataToPlot));\n    }\n  }, [parsedData, rateForPredictions]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <PredictedTimeline parsedData={parsedData} debtData={debtData} />\n\n        <Header as={\"h2\"}>\n          <Header.Content>📊 Data Analysis and Visualisations</Header.Content>\n          <Header.Subheader>\n            Data exploration, statistics, and visualisations solely based on\n            historical data. No predictions or projections involved.\n          </Header.Subheader>\n        </Header>\n        <GenericContainer\n          ChildComponent={\n            <VaccineStatisticsCompact\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Rollout Dashboard\"\n          description=\"Key numbers related to the vaccination programme.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n        />\n        {/* <Header as={\"h2\"}>\n          <Header.Content>🔮 Projections and Predictions</Header.Content>\n          <Header.Subheader>\n            Projections and predictions using various models and statistical\n            techniques. Those figures and visualisations are indicative only,\n            and are always subject to change when new data becomes available.\n          </Header.Subheader>\n        </Header> */}\n        {/* <Segment>\n          <Header as={\"h4\"}>\n            <Header.Content>\n              Set Combined Daily Rate for Predictions\n            </Header.Content>\n            <Header.Subheader>\n              Change the combined daily rate (1st + 2nd doses) used for\n              predictions. This allows one to assess how different rates impact\n              the vaccination timeline.\n            </Header.Subheader>\n          </Header>\n          <Form>\n            <Form.Group>\n              <Form.Field required>\n                <Input\n                  value={Math.round(rateForPredictions)}\n                  onClick={(value) => console.log(value)}\n                />\n              </Form.Field>\n              <Form.Button\n                onClick={() => setRateForPredictions(currentRateForPredictions)}\n              >\n                Current\n              </Form.Button>\n              <Form.Button\n                onClick={() =>\n                  setRateForPredictions(currentRateForPredictions / 2)\n                }\n              >\n                Half\n              </Form.Button>\n              <Form.Button\n                onClick={() =>\n                  setRateForPredictions(currentRateForPredictions * 2)\n                }\n              >\n                Double\n              </Form.Button>\n            </Form.Group>\n          </Form>\n        </Segment>\n        <GenericContainer\n          ChildComponent={\n            <ScoreCardGroupWithDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={\n            <SecondDoseDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              weeklyDebtData={weeklyDebtData}\n              rateForPredictions={rateForPredictions}\n            />\n          }\n          title=\"Projected Timeline\"\n          description=\"Projected timeline taking into account the second doses debt. A strict 12-week delay is introduced between 1st and 2nd doses until all 1st doses are administered, after which 2nd doses are done as soon as possible regardless of the delay. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}