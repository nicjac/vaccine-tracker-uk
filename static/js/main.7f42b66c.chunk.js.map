{"version":3,"sources":["data/ImportantValues.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","components/ScoreCardWithDebt.js","components/ScoreCardGroupWithDebt.js","components/VaccineStatisticsCompactCard.js","components/VaccineStatisticsCompact.js","components/SecondDoseDebt.js","assets/logo.png","utils/compute_utils.js","components/PredictedTimeline.js","App.js","reportWebVitals.js","index.js"],"names":["TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","CustomBarLabel","x","y","fill","value","width","viewBox","height","dx","dy","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","parsedData","data","length","ResponsiveContainer","BarChart","layout","margin","top","right","left","bottom","XAxis","type","domain","hide","YAxis","tick","Legend","verticalAlign","align","wrapperStyle","paddingLeft","formatter","entry","index","Bar","dataKey","background","label","isAnimationActive","ReferenceLine","stroke","strokeDasharray","Label","position","fontSize","fontStyle","CustomizedAxisTick","payload","moment","format","DailyRatesPlot","aspect","ComposedChart","CartesianGrid","date","tickFormatter","Intl","NumberFormat","Text","offset","angle","Tooltip","name","stackId","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","loading","Card","fluid","as","Segment","Content","Header","Meta","Description","textAlign","extra","Icon","ScoreCardWithDebt","debtData","targetDate","targetIndividuals","doseType","predictionCallback","visible","useState","eventDay","setEventDay","dosesColumn","setDosesColumn","useEffect","find","datum","cumFirstDoses","cumSecondDoses","delta","Math","round","diff","progressContent","style","marginTop","paddingBottom","size","color","marginLeft","marginRight","abs","Grid","Column","centered","basic","maxWidth","Subheader","ScoreCardGroupWithDebt","showTweets","predictionAdultsFirst","setPredictionAdultsFirst","predictionAdultsSecond","setPredictionAdultsSecond","predictionPriorityFirst","setPredictionPriorityFirst","predictionPrioritySecond","setPredictionPrioritySecond","stackable","columns","Row","VaccineStatisticsCompactCard","mainFigure","dayOnDay","dayOnDayPercent","weekOnWeek","weekOnWeekPercent","dataToPlot","disableDeltaRounding","compact","Statistic","Value","filter","item","VaccineStatisticsCompact","loaded","setLoaded","allDosesStatistics","setAllDosesStatistics","firstDosesStatistics","setFirstDosesStatistics","secondDosesStatistics","setSecondDosesStatistics","latestIndex","total","totalDayOnDay","totalDayOnDayPercent","totalWeekOnWeek","totalWeekOnWeekPercent","new","newDayOnDayPercent","newDayOnDay","newWeekOnWeek","newWeekOnWeekPercent","completedCourses","completedCoursesWeekOnWeek","completedCoursesDayOnDay","sevenDaysRate","sevenDaysRateDayOnDay","sevenDaysRateDayOnDayPercent","sevenDaysRateWeekOnWeek","sevenDaysRateWeekOnWeekPercent","adultPopulationDone","adultPopulationDoneDayOnDay","adultPopulationDoneWeekOnWeek","priorityGroupsDone","priorityGroupsDoneDayOnDay","priorityGroupsDoneWeekOnWeek","repeat","ceil","subtract","dividing","Group","marginBottom","Progress","percent","progress","SecondDoseDebt","weeklyDebtData","rateForPredictions","indexAllDone","setIndexAllDone","indexAllDoneWeekly","setIndexAllDoneWeekly","findIndex","LineChart","slice","locale","computeAverageRate","days","fromKey","toKey","forEach","_","mean","a","PredictedTimeline","App","setShowTweets","setParsedData","updateDate","setUpdateDate","setDebtData","setWeeklyDebtData","setRateForPredictions","currentRateForPredictions","setCurrentRateForPredictions","setLoading","location","useLocation","options","key","text","URLSearchParams","search","get","rawData","vaccination_json","sort","b","Date","latestDate","add","RATE","sevenDaysRateSecond","debtData_","startDate","i","clone","secondDosesDone","firstDosesDone","secondDosesCarryOverFromPreviousDay","secondDosesNewFromDay","spareCapacity","secondDosesDue","week","year","keys","Object","DaysDifference","SecondDosesToAddPerDay","newPeopleVaccinatedFirstDoseByPublishDate","dateTwelveWeeksAgo","expectedSecondDoses","cumPeopleVaccinatedFirstDoseByPublishDate","secondDosesDiscrepancies","cumPeopleVaccinatedSecondDoseByPublishDate","subtractedSecondDoses","fractionToSubtract","allDosesRate","carryOver","maxDoses","dateAllFirstDosesDone","entries","maxSecondDoses","min","max","console","log","debtDataToPlot","push","sumBy","fieldsToAverage","weeklyData","uniq","filteredByYear","filteredData","weekData","field","meanBy","startOf","convertToWeeklyData","className","Container","Image","src","logo","circular","bordered","Message","info","href","raised","List","bulleted","Item","Dropdown","selection","select","defaultValue","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f42b66c.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 53000000;\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-07-31\"; // Based on new target https://news.sky.com/story/covid-19-all-adults-to-be-offered-vaccine-by-end-of-july-under-pms-accelerated-plan-12224309\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={135}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 30,\n            right: 0,\n            left: 0,\n            bottom: 30,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            layout=\"horizontal\"\n            height={20}\n            align=\"center\"\n            wrapperStyle={{\n              top: 0,\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" aspect={2.5}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon, Segment } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n  loading,\n}) => {\n  return (\n    <Card fluid as={Segment} loading={loading}>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport moment from \"moment\";\n\nconst ScoreCardWithDebt = ({\n  debtData,\n  parsedData,\n  targetDate,\n  targetIndividuals,\n  title,\n  doseType,\n  predictionCallback,\n  visible,\n}) => {\n  const [eventDay, setEventDay] = useState(null);\n  const [dosesColumn, setDosesColumn] = useState(null);\n\n  useEffect(() => {\n    if (debtData) {\n      if (doseType === \"first\") {\n        setEventDay(\n          debtData.find((datum) => datum.cumFirstDoses >= targetIndividuals)\n        );\n        setDosesColumn(\"cumPeopleVaccinatedFirstDoseByPublishDate\");\n      } else {\n        setEventDay(\n          debtData.find((datum) => datum.cumSecondDoses >= targetIndividuals)\n        );\n        setDosesColumn(\"cumPeopleVaccinatedSecondDoseByPublishDate\");\n      }\n    }\n  }, [debtData]);\n\n  useEffect(() => {\n    if (eventDay)\n      predictionCallback({\n        eventDay: eventDay,\n        delta: Math.round(\n          moment(eventDay.date).diff(moment(targetDate), \"days\")\n        ),\n      });\n  }, [eventDay]);\n\n  if (eventDay && parsedData) {\n    let progressContent;\n\n    const delta = Math.round(\n      moment(eventDay.date).diff(moment(targetDate), \"days\")\n    );\n\n    if (!targetDate) {\n      progressContent = (\n        <Fragment>\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>{moment(eventDay.date).format(\"DD MMMM\")}</b>\n          </div>\n        </Fragment>\n      );\n    } else if (delta > 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"warning circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"red\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.abs(delta)}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} late\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else if (delta < 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.round(Math.abs(delta))}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} early\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            Predicted to hit target on the day!\n          </div>\n        </Fragment>\n      );\n    }\n\n    if (!visible) return null;\n\n    return (\n      <Grid.Column width={4} textAlign=\"center\">\n        <Grid centered>\n          <Segment\n            basic\n            style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n            textAlign=\"center\"\n          >\n            <Header as=\"h4\" textAlign=\"center\">\n              <Header.Content>{title}</Header.Content>\n              <Header.Subheader>\n                {`${targetIndividuals / 1000000}M 1st doses by ${moment(\n                  targetDate\n                ).format(\"DD MMM\")}`}\n              </Header.Subheader>\n            </Header>\n            <CircularProgressbarWithChildren\n              value={\n                (parsedData[parsedData.length - 1][dosesColumn] /\n                  targetIndividuals) *\n                100\n              }\n            >\n              {progressContent}\n            </CircularProgressbarWithChildren>\n          </Segment>\n        </Grid>\n      </Grid.Column>\n    );\n  } else return null;\n  // return null;\n};\n\nexport default ScoreCardWithDebt;\n","import React, { Fragment, useState } from \"react\";\nimport {\n  TARGET_ALL_GROUPS_DATE,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_DATE,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\nimport { Grid, Segment, Header, Icon, Divider } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport ScoreCardWithDebt from \"./ScoreCardWithDebt\";\n\nconst ScoreCardGroupWithDebt = ({\n  parsedData,\n  debtData,\n  showTweets,\n  dateUpdated,\n}) => {\n  const [predictionAdultsFirst, setPredictionAdultsFirst] = useState(null);\n  const [predictionAdultsSecond, setPredictionAdultsSecond] = useState(null);\n  const [predictionPriorityFirst, setPredictionPriorityFirst] = useState(null);\n  const [predictionPrioritySecond, setPredictionPrioritySecond] = useState(\n    null\n  );\n\n  return (\n    <Grid stackable centered columns={3}>\n      {/* <span></span>\n      <Divider horizontal>First Doses</Divider> */}\n      {showTweets &&\n        predictionPriorityFirst &&\n        predictionPriorityFirst.eventDay &&\n        predictionPrioritySecond &&\n        predictionPrioritySecond.eventDay && (\n          <Fragment>\n            <Segment textAlign=\"left\">\n              Targets scorecards 🎯 on {moment(dateUpdated).format(\"DD MMMM\")}\n              <br />\n              <br />\n              {predictionPriorityFirst.delta < 0 ? \"✅\" : \"❌\"}32M by 15 Apr (\n              {Math.abs(predictionPriorityFirst.delta)} days{\" \"}\n              {predictionPriorityFirst.delta < 0 ? \"early\" : \"late\"} on{\" \"}\n              {moment(predictionPriorityFirst.eventDay.date).format(\"DD/MM\")}\n              )\n              <br />\n              {predictionAdultsFirst.delta < 0 ? \"✅\" : \"❌\"}53M by 31 Jul (\n              {Math.abs(predictionAdultsFirst.delta)} days{\" \"}\n              {predictionAdultsFirst.delta < 0 ? \"early\" : \"late\"} on{\" \"}\n              {moment(predictionAdultsFirst.eventDay.date).format(\"DD/MM\")})\n              <br />\n              <br />\n              Those predictions are for 1st doses, and take into account the\n              current combined 7-day average as well as the growing second doses\n              debt.\n              <br />\n              <br />\n              #vaccine #COVIDVaccine\n            </Segment>\n            <Segment textAlign=\"left\">\n              🔮Predicted Timeline Update on{\" \"}\n              {moment(dateUpdated).format(\"DD MMMM\")}\n              <br />\n              <br />\n              {moment(predictionPriorityFirst.eventDay.date).format(\"D MMMM\")}\n              ➡️All Priority Groups received a 1st dose\n              <br />\n              {moment(predictionAdultsFirst.eventDay.date).format(\"D MMMM\")}\n              ➡️All Adults received a 1st dose\n              <br />\n              {moment(predictionPrioritySecond.eventDay.date).format(\"D MMMM\")}\n              ➡️All Priority Groups received 2 doses\n              <br />\n              {moment(predictionAdultsSecond.eventDay.date).format(\"D MMMM\")}\n              ➡️All Adults received 2 doses\n              <br />\n              <br />\n              Based on current trends, supply, and second doses debt\n            </Segment>\n          </Fragment>\n        )}\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ALL_GROUPS_DATE}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n          doseType=\"first\"\n          predictionCallback={setPredictionPriorityFirst}\n          visible={false}\n        />\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ADULT_POPULATION_DATE}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"Adult Population\"\n          doseType=\"first\"\n          predictionCallback={setPredictionAdultsFirst}\n          visible={true}\n        />\n      </Grid.Row>\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n          doseType=\"second\"\n          predictionCallback={setPredictionPrioritySecond}\n          visible={false}\n        />\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"All Adults\"\n          doseType=\"second\"\n          predictionCallback={setPredictionAdultsSecond}\n          visible={false}\n        />\n      </Grid.Row>\n    </Grid>\n  );\n};\nexport default ScoreCardGroupWithDebt;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst VaccineStatisticsCompactCard = ({\n  title,\n  description,\n  mainFigure,\n  dayOnDay,\n  dayOnDayPercent,\n  weekOnWeek,\n  weekOnWeekPercent,\n  dataToPlot,\n  disableDeltaRounding,\n}) => {\n  const getDayOnDay = () => {\n    if (dayOnDay)\n      return (\n        <Fragment>\n          {dayOnDay > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Day: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(dayOnDay.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(dayOnDay))}</b>\n          )}\n          {dayOnDayPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(dayOnDayPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n          <br />\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getWeekOnWeek = () => {\n    if (weekOnWeek)\n      return (\n        <Fragment>\n          {weekOnWeek > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Week: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(weekOnWeek.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(weekOnWeek))}</b>\n          )}\n          {weekOnWeekPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(weekOnWeekPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getPlot = () => {\n    if (dataToPlot) {\n      dataToPlot = dataToPlot.filter(\n        (item) => item.data != null && item.data != 0\n      );\n\n      return (\n        <BarChart\n          width={250}\n          height={50}\n          data={dataToPlot}\n          margin={{\n            top: 10,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"date\" hide={true} />\n          <Tooltip\n            formatter={(value, name) => {\n              return [new Intl.NumberFormat(\"en\").format(value)];\n            }}\n          />\n          <Bar type=\"monotone\" dataKey=\"data\" fill=\"#8884d8\" />\n        </BarChart>\n      );\n    } else return null;\n  };\n\n  return (\n    <Card textAlign=\"left\" compact>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>\n          <Statistic size=\"tiny\">\n            <Statistic.Value>{mainFigure}</Statistic.Value>\n          </Statistic>\n        </Card.Description>\n\n        <Card.Description>\n          {getDayOnDay()}\n          {getWeekOnWeek()}\n          {getPlot()}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default VaccineStatisticsCompactCard;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst VaccineStatisticsCompact = ({ parsedData, showTweets, dateUpdated }) => {\n  const [loaded, setLoaded] = useState(null);\n\n  const [allDosesStatistics, setAllDosesStatistics] = useState(null);\n  const [firstDosesStatistics, setFirstDosesStatistics] = useState(null);\n  const [secondDosesStatistics, setSecondDosesStatistics] = useState(null);\n\n  useEffect(() => {\n    if (parsedData) {\n      const latestIndex = parsedData.length - 1;\n\n      setAllDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        completedCourses:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        completedCoursesWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        completedCoursesDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        sevenDaysRate:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n          1,\n      });\n\n      setFirstDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n\n      setSecondDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n      setLoaded(true);\n    }\n  }, [parsedData]);\n\n  if (loaded)\n    return (\n      <Grid>\n        <Grid.Row>\n          {showTweets && (\n            <Fragment>\n              <Segment textAlign=\"left\">\n                📈{moment(dateUpdated).format(\"DD MMMM\")} Progress Tracker📈\n                <br />\n                <br />\n                1️⃣ 1st Dose\n                <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(firstDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {20 - Math.ceil(firstDosesStatistics.priorityGroupsDone * 20) >\n                0\n                  ? \"░\".repeat(\n                      20 -\n                        Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                    )\n                  : null}{\" \"}\n                {(firstDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                2️⃣ 2nd Dose <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                #vaccine\n              </Segment>\n              <Segment textAlign=\"left\">\n                1️⃣ First Doses Update on {moment(dateUpdated).format(\"DD MMMM\")}{\" \"}\n                📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 1st Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.total)}\n                <br />\n                <br />\n                {firstDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {firstDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    firstDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n              <Segment textAlign=\"left\">\n                2️⃣ Second Doses Update on{\" \"}\n                {moment(dateUpdated).format(\"DD MMMM\")} 📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 2nd Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.total)}\n                <br />\n                <br />\n                {secondDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {secondDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    secondDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n            </Fragment>\n          )}\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>💉 Overall Progress</Header.Content>\n            </Header>\n            <Card.Group>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Adult Population</Card.Header>\n                  <Card.Meta>53M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      color=\"blue\"\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneWeekOnWeek *\n                        100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Priority Groups</Card.Header>\n                  <Card.Meta>32M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      color=\"blue\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <VaccineStatisticsCompactCard\n                title=\"Completed Courses\"\n                description=\"Fraction of completed courses\"\n                mainFigure={\n                  (allDosesStatistics.completedCourses * 100).toFixed(1) + \"%\"\n                }\n                dayOnDay={allDosesStatistics.completedCoursesDayOnDay * 100}\n                weekOnWeek={allDosesStatistics.completedCoursesWeekOnWeek * 100}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n                disableDeltaRounding={true}\n              />\n            </Card.Group>\n          </Segment>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ + 2️⃣ All Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"Inoculations so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.total\n                )}\n                dayOnDay={allDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={allDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"Number of new inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.new\n                )}\n                dayOnDay={allDosesStatistics.newDayOnDay}\n                dayOnDayPercent={allDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(allDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={allDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  allDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={allDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  allDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"] + item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ First Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"1st Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.total\n                )}\n                dayOnDay={firstDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.new\n                )}\n                dayOnDay={firstDosesStatistics.newDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={firstDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  firstDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={firstDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  firstDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>2️⃣ Second Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"2nd Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.total\n                )}\n                dayOnDay={secondDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.new\n                )}\n                dayOnDay={secondDosesStatistics.newDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={secondDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  secondDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={secondDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  secondDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n      </Grid>\n    );\n  else return null;\n};\n\nexport default VaccineStatisticsCompact;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport moment from \"moment\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  CartesianGrid,\n  ReferenceLine,\n  Label,\n  ComposedChart,\n  Legend,\n  Line,\n  Text,\n  Tooltip,\n  LineChart,\n  Bar,\n  YAxis,\n  BarChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Grid, Segment, Header } from \"semantic-ui-react\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\nimport _, { forEach } from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-30}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM YY\")}\n    </text>\n    // </g>\n  );\n};\n\nconst SecondDoseDebt = ({\n  parsedData,\n  debtData,\n  weeklyDebtData,\n  rateForPredictions,\n}) => {\n  const [indexAllDone, setIndexAllDone] = useState(null);\n  const [indexAllDoneWeekly, setIndexAllDoneWeekly] = useState(null);\n\n  useEffect(() => {\n    if (debtData) {\n      const indexAllDone = debtData.findIndex(\n        (item) =>\n          item.cumFirstDoses >= 53000000 && item.cumSecondDoses >= 53000000\n      );\n      setIndexAllDone(indexAllDone);\n\n      const indexAllDoneWeekly = weeklyDebtData.findIndex(\n        (item) =>\n          item.cumFirstDoses >= 53000000 && item.cumSecondDoses >= 53000000\n      );\n      setIndexAllDoneWeekly(indexAllDoneWeekly);\n    }\n  }, [parsedData, debtData, weeklyDebtData, rateForPredictions]);\n\n  if (debtData && indexAllDone) {\n    return (\n      <Fragment>\n        <Header as=\"h4\">\n          Cumulative Doses Predictions\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            // data={debtData.slice(0, indexAllDone + 5)}\n            data={debtData.slice(0, indexAllDone + 5)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              domain={[0, 60000000]}\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <ReferenceLine\n              stroke=\"blue\"\n              y=\"53000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomLeft\",\n                value: \"All Adults\",\n                fontSize: 16,\n              }}\n            />\n            <ReferenceLine\n              stroke=\"red\"\n              y=\"32000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomRight\",\n                value: \"Priority Groups \",\n                fontSize: 16,\n              }}\n            />\n            <Line\n              dataKey=\"cumFirstDoses\"\n              dot={false}\n              stroke=\"#8884d8\"\n              strokeWidth={3}\n            />\n            <Line\n              dataKey=\"cumSecondDoses\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n        <Header as=\"h4\">\n          Weekly Doses Prediction\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <BarChart\n            data={weeklyDebtData.slice(0, indexAllDoneWeekly + 1)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 40,\n              bottom: 30,\n            }}\n          >\n            {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"firstDosesDone\":\n                    return \"First Dose\";\n\n                  case \"secondDosesDone\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"weekFirstDay\"\n              tick={<CustomizedAxisTick />}\n              // domain={\n              //   (weeklyDebtData[0].date,\n              //   weeklyDebtData[weeklyDebtData.length - 1].date)\n              // }\n              // label={{ dy: 30, value: \"Week\" }}\n              type=\"category\"\n              // domain={[\"auto\", \"auto\"]}\n            />\n            <YAxis\n              label={\n                <Text x={0} y={0} dx={30} dy={245} offset={0} angle={-90}>\n                  Daily Vaccinations\n                </Text>\n              }\n              tickFormatter={(value) =>\n                new Intl.NumberFormat(\"en\").format(value)\n              }\n            />\n            <Bar dataKey=\"firstDosesDone\" stackId=\"a\" fill=\"#8884d8\" />\n            <Bar dataKey=\"secondDosesDone\" stackId=\"a\" fill=\"#82ca9d\" />\n          </BarChart>\n        </ResponsiveContainer>\n\n        {/* <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            data={debtData.slice(0, parsedData.length)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <Line\n              dataKey=\"secondDosesDue\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n\n          </LineChart>\n        </ResponsiveContainer>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            data={parsedData.slice(7, parsedData.length)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <Line\n              dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n \n          </LineChart>\n        </ResponsiveContainer> */}\n      </Fragment>\n    );\n  } else return null;\n};\n\nexport default SecondDoseDebt;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import _, { forEach } from \"lodash\";\nimport moment from \"moment\";\nmoment.locale(\"en-gb\");\n\nexport const computeAverageRate = (data, days, fromKey, toKey) => {\n  data.forEach((datum, index) => {\n    if (index >= 6) {\n      data[index][toKey] = _.mean(\n        data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n      );\n    } else data[index][toKey] = null;\n  });\n\n  return data;\n};\n\nexport const predictDebtIntoFuture = (\n  data,\n  allDosesRate,\n  firstDosesColumn,\n  maxFirstDoses,\n  initialCumFirstDoses,\n  initialCumSecondDoses\n) => {\n  let carryOver = 0;\n  let secondDosesDue = 0;\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n\n  const debtData_ = data.map((datum, index) => {\n    // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n    secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n    let secondDosesDueRecord = secondDosesDue;\n    let carryOverRecord = carryOver;\n\n    let secondDosesDone = 0;\n\n    if (\n      index > 0 &&\n      cumFirstDoses >= maxFirstDoses &&\n      cumSecondDoses <= maxFirstDoses\n    ) {\n      secondDosesDone = allDosesRate;\n    } else {\n      if (secondDosesDue >= allDosesRate) {\n        secondDosesDone = allDosesRate;\n        carryOver = secondDosesDue - allDosesRate;\n      } else {\n        secondDosesDone = secondDosesDue;\n        carryOver = 0;\n      }\n    }\n\n    let spareCapacity = allDosesRate - secondDosesDone;\n    let firstDosesDone = 0;\n\n    if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n      firstDosesDone = spareCapacity;\n\n    secondDosesDue -= secondDosesDue;\n\n    if (index == 0) {\n      if (initialCumFirstDoses && initialCumSecondDoses) {\n        cumFirstDoses = initialCumFirstDoses;\n        cumSecondDoses = initialCumSecondDoses;\n      } else {\n        cumFirstDoses = firstDosesDone;\n        cumSecondDoses = secondDosesDone;\n      }\n    } else {\n      cumFirstDoses += firstDosesDone;\n      cumSecondDoses += secondDosesDone;\n    }\n\n    return {\n      date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: carryOverRecord,\n      secondDosesNewFromDay: datum[firstDosesColumn],\n      spareCapacity: spareCapacity,\n      secondDosesDue: secondDosesDueRecord,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    };\n  });\n\n  return debtData_;\n};\n\nexport const fillDataWithConstantRate = (\n  initialData,\n  daysToFill,\n  rate,\n  cumFirstDosesColumn,\n  cumSecondDosesColumn,\n  maxFirstDoses\n) => {\n  let fillData = [];\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n  let firstDosesDone = 0;\n  let secondDosesDone = 0;\n\n  for (let i = 1; i < daysToFill; i++) {\n    let maxFirstDosesReached = false;\n    let maxSecondDosesReached = false;\n\n    if (i == 1) {\n      if (\n        initialData[initialData.length - 1][cumFirstDosesColumn] >=\n        maxFirstDoses\n      )\n        maxFirstDosesReached = true;\n      if (\n        initialData[initialData.length - 1][cumSecondDosesColumn] >=\n        maxFirstDoses\n      )\n        maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else {\n        console.log(\"Should never reach this\");\n      }\n    } else {\n      if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n      if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumSecondDoses += rate;\n        firstDosesDone = 0;\n        secondDosesDone = rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        // do nothing\n      } else console.log(\"Should never reach this\");\n    }\n\n    fillData.push({\n      date: moment(initialData[initialData.length - 1].date)\n        .add(i, \"day\")\n        .format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: 0,\n      secondDosesNewFromDay: 0,\n      spareCapacity: rate,\n      secondDosesDue: 0,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    });\n  }\n\n  return fillData;\n};\n\nexport const addWeekField = (data) => {\n  return data.map((datum) => {\n    datum.week = moment(datum.date).week();\n    return datum;\n  });\n};\n\nexport const convertToWeeklyData = (data) => {\n  const fieldsToAverage = [\n    \"cumFirstDoses\",\n    \"cumSecondDoses\",\n    \"firstDosesDone\",\n    \"secondDosesDone\",\n    \"spareCapacity\",\n  ];\n\n  const weeklyData = [];\n\n  const years = _.uniq(_.map(data, \"year\"));\n\n  years.forEach((year) => {\n    const filteredByYear = data.filter((item) => item.year == year);\n    const weeks = _.uniq(_.map(filteredByYear, \"week\"));\n\n    weeks.forEach((week) => {\n      const filteredData = data.filter(\n        (item) => item.week === week && item.year == year\n      );\n\n      let weekData = {};\n\n      fieldsToAverage.forEach((field) => {\n        weekData[field] = _.meanBy(filteredData, field);\n      });\n\n      weekData[\"week\"] = week;\n\n      weekData[\"weekFirstDay\"] = moment({ y: year }) // get first day of the given year\n        .week(week) // get the first week according locale\n        .startOf(\"week\") // get the first day of the week according locale\n        .format(\"YYYY-MM-DD\");\n      weeklyData.push(weekData);\n    });\n  });\n\n  return weeklyData;\n};\n","import React from \"react\";\n\nconst PredictedTimeline = ({ parsedData, debtData }) => {\n  return null;\n};\n\nexport default PredictedTimeline;\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n  Dropdown,\n} from \"semantic-ui-react\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport VaccineStatisticsCompact from \"./components/VaccineStatisticsCompact\";\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport { computeAverageRate, convertToWeeklyData } from \"./utils/compute_utils\";\nimport PredictedTimeline from \"./components/PredictedTimeline\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [showTweets, setShowTweets] = useState(false);\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n  const [debtData, setDebtData] = useState(null);\n  const [weeklyDebtData, setWeeklyDebtData] = useState(null);\n  const [rateForPredictions, setRateForPredictions] = useState(null);\n  const [currentRateForPredictions, setCurrentRateForPredictions] = useState(\n    null\n  );\n  const [loading, setLoading] = useState(true);\n\n  let location = useLocation();\n\n  const options = [\n    { key: 1, text: \"Current 7-day average\", value: currentRateForPredictions },\n    {\n      key: 2,\n      text: \"Twice Current 7-day average\",\n      value: currentRateForPredictions * 2,\n    },\n    {\n      key: 3,\n      text: \"Half-current 7-day average\",\n      value: currentRateForPredictions / 2,\n    },\n  ];\n\n  useEffect(() => {\n    let showTweetsParam = new URLSearchParams(location.search).get(\n      \"showTweets\"\n    );\n\n    if (showTweetsParam) setShowTweets(true);\n  }, [location]);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  useEffect(() => {\n    if (parsedData) {\n      setLoading(true);\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n      const debtData_ = {};\n\n      const startDate = moment(parsedData[parsedData.length - 1].date).add(\n        1,\n        \"days\"\n      );\n\n      // Create structure to hold the debt data\n      for (let i = 0; i < 500; i++) {\n        debtData_[startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\")] = {\n          date: startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\"),\n          secondDosesDone: 0,\n          firstDosesDone: 0,\n          secondDosesCarryOverFromPreviousDay: 0,\n          secondDosesNewFromDay: 0,\n          spareCapacity: 0,\n          secondDosesDue: 0,\n          cumFirstDoses: 0,\n          cumSecondDoses: 0,\n          week: moment(startDate.clone().add(i, \"days\")).week(),\n          year: moment(startDate.clone().add(i, \"days\")).format(\"YYYY\"),\n        };\n      }\n      let keys = Object.keys(debtData_);\n      const endDate = keys[keys.length - 1];\n\n      // Add 2nd doses data from before start of daily data releases\n      // Daily releases started on 2021-01-10\n      // Take the cumulative on\n      const SecondDosesToAdd = 2286572 - 391399;\n      const DaysDifference = Math.abs(\n        moment(\"2020-12-08\").diff(moment(\"2021-01-09\"), \"days\")\n      );\n      const SecondDosesToAddPerDay = SecondDosesToAdd / DaysDifference;\n\n      for (let i = 0; i <= DaysDifference; i++) {\n        let date = moment(\"2020-12-08\").add(i, \"days\");\n        let targetDate = date.add(12, \"weeks\").format(\"YYYY-MM-DD\");\n\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue += SecondDosesToAddPerDay;\n      }\n\n      // Project initial data forward\n      parsedData.map((datum) => {\n        let targetDate = moment(datum[\"date\"])\n          .add(12, \"weeks\")\n          .format(\"YYYY-MM-DD\");\n\n        // Only add if date falls in existing debt data\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue +=\n            datum.newPeopleVaccinatedFirstDoseByPublishDate;\n      });\n\n      // We need to make sure that we are not double-counting second doses if they have been done before the 12 weeks delay\n      // We computed what was expected\n      const dateTwelveWeeksAgo = moment(parsedData[parsedData.length - 1].date)\n        .subtract(12, \"weeks\")\n        .format(\"YYYY-MM-DD\");\n\n      const dataTwelveWeeksAgo = parsedData.filter(\n        (item) => item.date === dateTwelveWeeksAgo\n      );\n      const expectedSecondDoses =\n        dataTwelveWeeksAgo[0].cumPeopleVaccinatedFirstDoseByPublishDate;\n      const secondDosesDiscrepancies = Math.abs(\n        expectedSecondDoses -\n          parsedData[parsedData.length - 1]\n            .cumPeopleVaccinatedSecondDoseByPublishDate\n      );\n\n      let subtractedSecondDoses = 0;\n      let index = 0;\n      const fractionToSubtract = 0.04;\n      keys = Object.keys(debtData_);\n\n      // We subtract the discrepencies\n      while (subtractedSecondDoses <= secondDosesDiscrepancies) {\n        if (\n          debtData_[keys[index]].secondDosesDue >=\n          Math.round(fractionToSubtract * secondDosesDiscrepancies)\n        ) {\n          debtData_[keys[index]].secondDosesDue -= Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n          subtractedSecondDoses += Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n        }\n\n        index++;\n      }\n\n      let carryOver = 0;\n      let cumFirstDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedFirstDoseByPublishDate;\n      let cumSecondDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate;\n\n      const maxDoses = 53000000;\n\n      let allDosesRate;\n      if (rateForPredictions) allDosesRate = rateForPredictions;\n      else allDosesRate = RATE;\n\n      if (!currentRateForPredictions) {\n        setCurrentRateForPredictions(allDosesRate);\n        setRateForPredictions(allDosesRate);\n      }\n\n      let dateAllFirstDosesDone = null;\n\n      Object.entries(debtData_).forEach((entry, index) => {\n        const [key, value] = entry;\n\n        let secondDosesDue = value.secondDosesDue + carryOver;\n\n        value.carryOver = carryOver;\n\n        let secondDosesDone = 0;\n        let firstDosesDone = 0;\n\n        // If all first doses done --> prioritize second doses\n        if (cumFirstDoses >= maxDoses && cumSecondDoses <= maxDoses) {\n          // We only start all doses possible after 3 weeks following the last 1st dose administered\n          if (moment(value.date).diff(dateAllFirstDosesDone, \"days\") >= 21) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        } else if (cumSecondDoses <= maxDoses) {\n          // If more doses due that the rate\n          // --> second doses done are equal to the rate\n          if (secondDosesDue > allDosesRate) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        }\n\n        // Never allow second doses to overtake first doses\n        const maxSecondDoses = cumFirstDoses - cumSecondDoses;\n\n        if (cumSecondDoses + secondDosesDone > cumFirstDoses) {\n          secondDosesDone = Math.min(maxSecondDoses, secondDosesDone);\n        }\n\n        carryOver = Math.max(secondDosesDue - secondDosesDone, 0);\n        carryOver = Math.min(cumFirstDoses - cumSecondDoses, carryOver);\n        carryOver = Math.max(carryOver, 0);\n\n        let spareCapacity = Math.max(allDosesRate - secondDosesDone, 0);\n\n        if (spareCapacity > 0 && cumFirstDoses <= maxDoses) {\n          firstDosesDone = spareCapacity;\n\n          let targetDate = moment(value.date)\n            .add(12, \"weeks\")\n            .format(\"YYYY-MM-DD\");\n\n          if (targetDate in debtData_)\n            debtData_[targetDate].secondDosesDue += firstDosesDone;\n          else console.log(targetDate);\n        }\n\n        cumFirstDoses = cumFirstDoses + firstDosesDone;\n        cumSecondDoses = cumSecondDoses + secondDosesDone;\n\n        if (cumFirstDoses >= maxDoses && !dateAllFirstDosesDone)\n          dateAllFirstDosesDone = moment(value.date);\n\n        value.firstDosesDone = firstDosesDone;\n        value.secondDosesDone = secondDosesDone;\n        value.cumFirstDoses = cumFirstDoses;\n        value.cumSecondDoses = cumSecondDoses;\n      });\n\n      const debtDataToPlot = [];\n\n      for (const [key, value] of Object.entries(debtData_)) {\n        debtDataToPlot.push(value);\n      }\n\n      console.log(\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate +\n          _.sumBy(debtDataToPlot, \"secondDosesDue\")\n      );\n\n      setDebtData(debtDataToPlot);\n      setWeeklyDebtData(convertToWeeklyData(debtDataToPlot));\n\n      // console.log(parsedData);\n\n      setLoading(false);\n    }\n  }, [parsedData, rateForPredictions]);\n\n  console.log(loading);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <PredictedTimeline parsedData={parsedData} debtData={debtData} />\n\n        <Header as={\"h2\"}>\n          <Header.Content>📊 Data Analysis and Visualisations</Header.Content>\n          <Header.Subheader>\n            Data exploration, statistics, and visualisations solely based on\n            historical data. No predictions or projections involved.\n          </Header.Subheader>\n        </Header>\n        <GenericContainer\n          ChildComponent={\n            <VaccineStatisticsCompact\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Rollout Dashboard\"\n          description=\"Key numbers related to the vaccination programme.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <Header as={\"h2\"}>\n          <Header.Content>🔮 Projections and Predictions</Header.Content>\n          <Header.Subheader>\n            Projections and predictions using various models and statistical\n            techniques. Those figures and visualisations are indicative only,\n            and are always subject to change when new data becomes available.\n          </Header.Subheader>\n        </Header>\n        <Segment>\n          <Header as={\"h4\"}>\n            <Header.Content>Prediction Parameters</Header.Content>\n            <Header.Subheader>\n              Update the parameters used for the predictions below.\n            </Header.Subheader>\n          </Header>\n          Combined rate:{\" \"}\n          <Dropdown\n            options={options}\n            selection\n            select\n            defaultValue={currentRateForPredictions}\n            value={rateForPredictions}\n            onChange={(a, b) => {\n              setLoading(true);\n              setRateForPredictions(b.value);\n            }}\n            loading={loading}\n          />\n        </Segment>\n        <GenericContainer\n          ChildComponent={\n            <ScoreCardGroupWithDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <SecondDoseDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              weeklyDebtData={weeklyDebtData}\n              rateForPredictions={rateForPredictions}\n            />\n          }\n          title=\"Projected Timeline\"\n          description=\"Projected timeline taking into account the second doses debt. A strict 12-week delay is introduced between 1st and 2nd doses until all 1st doses are administered, after which 2nd doses are done as soon as possible regardless of the delay. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}