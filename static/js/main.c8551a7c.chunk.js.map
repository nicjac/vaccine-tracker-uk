{"version":3,"sources":["assets/logo.png","utils/compute_utils.js","App.js","reportWebVitals.js","index.js"],"names":["moment","locale","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Container","Message","info","style","marginTop","Header","href","document","getElementById"],"mappings":"81yGAAe,I,OCEfA,IAAOC,OAAO,S,MC0iBCC,IChiBAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCIdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACA,cAACC,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,CAASC,MAAI,EAACC,MAAO,CAACC,UAAU,SAAhC,UACM,cAACH,EAAA,EAAQI,OAAT,gCACA,2QAE4B,mBAAGC,KAAK,mCAAR,gCAF5B,qCASRC,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.c8551a7c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import _, { forEach } from \"lodash\";\nimport moment from \"moment\";\nmoment.locale(\"en-gb\");\n\nexport const computeAverageRate = (data, days, fromKey, toKey) => {\n  data.forEach((datum, index) => {\n    if (index >= 6) {\n      data[index][toKey] = _.mean(\n        data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n      );\n    } else data[index][toKey] = null;\n  });\n\n  return data;\n};\n\nexport const predictDebtIntoFuture = (\n  data,\n  allDosesRate,\n  firstDosesColumn,\n  maxFirstDoses,\n  initialCumFirstDoses,\n  initialCumSecondDoses\n) => {\n  let carryOver = 0;\n  let secondDosesDue = 0;\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n\n  const debtData_ = data.map((datum, index) => {\n    // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n    secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n    let secondDosesDueRecord = secondDosesDue;\n    let carryOverRecord = carryOver;\n\n    let secondDosesDone = 0;\n\n    if (\n      index > 0 &&\n      cumFirstDoses >= maxFirstDoses &&\n      cumSecondDoses <= maxFirstDoses\n    ) {\n      secondDosesDone = allDosesRate;\n    } else {\n      if (secondDosesDue >= allDosesRate) {\n        secondDosesDone = allDosesRate;\n        carryOver = secondDosesDue - allDosesRate;\n      } else {\n        secondDosesDone = secondDosesDue;\n        carryOver = 0;\n      }\n    }\n\n    let spareCapacity = allDosesRate - secondDosesDone;\n    let firstDosesDone = 0;\n\n    if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n      firstDosesDone = spareCapacity;\n\n    secondDosesDue -= secondDosesDue;\n\n    if (index == 0) {\n      if (initialCumFirstDoses && initialCumSecondDoses) {\n        cumFirstDoses = initialCumFirstDoses;\n        cumSecondDoses = initialCumSecondDoses;\n      } else {\n        cumFirstDoses = firstDosesDone;\n        cumSecondDoses = secondDosesDone;\n      }\n    } else {\n      cumFirstDoses += firstDosesDone;\n      cumSecondDoses += secondDosesDone;\n    }\n\n    return {\n      date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: carryOverRecord,\n      secondDosesNewFromDay: datum[firstDosesColumn],\n      spareCapacity: spareCapacity,\n      secondDosesDue: secondDosesDueRecord,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    };\n  });\n\n  return debtData_;\n};\n\nexport const fillDataWithConstantRate = (\n  initialData,\n  daysToFill,\n  rate,\n  cumFirstDosesColumn,\n  cumSecondDosesColumn,\n  maxFirstDoses\n) => {\n  let fillData = [];\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n  let firstDosesDone = 0;\n  let secondDosesDone = 0;\n\n  for (let i = 1; i < daysToFill; i++) {\n    let maxFirstDosesReached = false;\n    let maxSecondDosesReached = false;\n\n    if (i == 1) {\n      if (\n        initialData[initialData.length - 1][cumFirstDosesColumn] >=\n        maxFirstDoses\n      )\n        maxFirstDosesReached = true;\n      if (\n        initialData[initialData.length - 1][cumSecondDosesColumn] >=\n        maxFirstDoses\n      )\n        maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else {\n        console.log(\"Should never reach this\");\n      }\n    } else {\n      if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n      if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumSecondDoses += rate;\n        firstDosesDone = 0;\n        secondDosesDone = rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        // do nothing\n      } else console.log(\"Should never reach this\");\n    }\n\n    fillData.push({\n      date: moment(initialData[initialData.length - 1].date)\n        .add(i, \"day\")\n        .format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: 0,\n      secondDosesNewFromDay: 0,\n      spareCapacity: rate,\n      secondDosesDue: 0,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    });\n  }\n\n  return fillData;\n};\n\nexport const addWeekField = (data) => {\n  return data.map((datum) => {\n    datum.week = moment(datum.date).week();\n    return datum;\n  });\n};\n\nexport const convertToWeeklyData = (data) => {\n  const fieldsToAverage = [\n    \"cumFirstDoses\",\n    \"cumSecondDoses\",\n    \"firstDosesDone\",\n    \"secondDosesDone\",\n    \"spareCapacity\",\n  ];\n\n  const weeklyData = [];\n\n  const years = _.uniq(_.map(data, \"year\"));\n\n  years.forEach((year) => {\n    const filteredByYear = data.filter((item) => item.year == year);\n    const weeks = _.uniq(_.map(filteredByYear, \"week\"));\n\n    weeks.forEach((week) => {\n      const filteredData = data.filter(\n        (item) => item.week === week && item.year == year\n      );\n\n      let weekData = {};\n\n      fieldsToAverage.forEach((field) => {\n        weekData[field] = _.meanBy(filteredData, field);\n      });\n\n      const predicted = _.some(filteredData, { predicted: true });\n\n      weekData[\"week\"] = week;\n\n      weekData.predicted = predicted;\n\n      weekData[\"weekFirstDay\"] = moment({ y: year }) // get first day of the given year\n        .week(week) // get the first week according locale\n        .startOf(\"week\") // get the first day of the week according locale\n        .format(\"YYYY-MM-DD\");\n\n      weeklyData.push(weekData);\n    });\n  });\n\n  return weeklyData;\n};\n\nexport const computeStatistics = (parsedData) => {\n  const latestIndex = parsedData.length - 1;\n\n  let statistics = {};\n\n  statistics.allDosesStatistics = {\n    total:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    totalDayOnDayPercent:\n      (parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    totalWeekOnWeekPercent:\n      (parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    new:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDayPercent:\n      (parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 1][\n        \"newPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 7][\n        \"newPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    newWeekOnWeekPercent:\n      (parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    completedCourses:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n    completedCoursesWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ],\n    completedCoursesDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ],\n    sevenDaysRate:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n        parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]),\n\n    sevenDaysRateDayOnDayPercent:\n      (parsedData[latestIndex][\"sevenDaysRate\"] +\n        parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n        (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n        parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]),\n\n    sevenDaysRateWeekOnWeekPercent:\n      (parsedData[latestIndex][\"sevenDaysRate\"] +\n        parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n        (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n      1,\n  };\n\n  statistics.firstDosesStatistics = {\n    total: parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n\n    totalDayOnDayPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n\n    totalWeekOnWeekPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    new: parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newDayOnDayPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newWeekOnWeekPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRate\"] -\n      parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n    sevenDaysRateDayOnDayPercent:\n      parsedData[latestIndex][\"sevenDaysRate\"] /\n        parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRate\"] -\n      parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n    sevenDaysRateWeekOnWeekPercent:\n      parsedData[latestIndex][\"sevenDaysRate\"] /\n        parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n      1,\n    adultPopulationDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n      54353665,\n    adultPopulationDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665,\n    adultPopulationDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665,\n    priorityGroupsDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n      32000000,\n    priorityGroupsDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000,\n    priorityGroupsDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000,\n  };\n\n  statistics.secondDosesStatistics = {\n    total:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n\n    totalDayOnDayPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n\n    totalWeekOnWeekPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    new: parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDayPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newWeekOnWeekPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n    sevenDaysRateDayOnDayPercent:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n        parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n    sevenDaysRateWeekOnWeekPercent:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n        parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n      1,\n    adultPopulationDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      54353665,\n    adultPopulationDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        54353665,\n    adultPopulationDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        54353665,\n    priorityGroupsDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      32000000,\n    priorityGroupsDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        32000000,\n    priorityGroupsDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        32000000,\n  };\n\n  return statistics;\n};\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n  Dropdown,\n} from \"semantic-ui-react\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport VaccineStatisticsCompact from \"./components/Statistics/VaccineStatisticsCompact\";\nimport StatisticsOverall from \"./components/Statistics/StatisticsOverall\";\nimport StatisticsFirstDoses from \"./components/Statistics/StatisticsFirstDoses\";\nimport StatisticsSecondDoses from \"./components/Statistics/StatisticsSecondDoses\";\n\nimport StatisticsCombinedDoses from \"./components/Statistics/StatisticsCombinedDoses\";\n\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport {\n  computeAverageRate,\n  convertToWeeklyData,\n  computeStatistics,\n} from \"./utils/compute_utils\";\nimport PredictedTimeline from \"./components/PredictedTimeline\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport { generateTweetHistoricalData } from \"./utils/generate_tweets\";\n\nfunction App() {\n  const [showTweets, setShowTweets] = useState(false);\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n  const [debtData, setDebtData] = useState(null);\n  const [weeklyDebtData, setWeeklyDebtData] = useState(null);\n  const [rateForPredictions, setRateForPredictions] = useState(null);\n  const [currentRateForPredictions, setCurrentRateForPredictions] =\n    useState(null);\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState(null);\n\n  let location = useLocation();\n\n  const options = [\n    { key: 1, text: \"Current 7-day average\", value: currentRateForPredictions },\n    {\n      key: 2,\n      text: \"Twice Current 7-day average\",\n      value: currentRateForPredictions * 2,\n    },\n    {\n      key: 3,\n      text: \"Half-current 7-day average\",\n      value: currentRateForPredictions / 2,\n    },\n  ];\n\n  useEffect(() => {\n    let showTweetsParam = new URLSearchParams(location.search).get(\n      \"showTweets\"\n    );\n\n    if (showTweetsParam) setShowTweets(true);\n  }, [location]);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  useEffect(() => {\n    if (parsedData) {\n      setLoading(true);\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n      const debtData_ = {};\n\n      const startDate = moment(parsedData[parsedData.length - 1].date).add(\n        1,\n        \"days\"\n      );\n\n      // Create structure to hold the debt data\n      for (let i = 0; i < 500; i++) {\n        debtData_[startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\")] = {\n          date: startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\"),\n          secondDosesDone: 0,\n          firstDosesDone: 0,\n          secondDosesCarryOverFromPreviousDay: 0,\n          secondDosesNewFromDay: 0,\n          spareCapacity: 0,\n          secondDosesDue: 0,\n          cumFirstDoses: 0,\n          cumSecondDoses: 0,\n          predicted: true,\n          week: moment(startDate.clone().add(i, \"days\")).week(),\n          year: moment(startDate.clone().add(i, \"days\")).format(\"YYYY\"),\n        };\n      }\n      let keys = Object.keys(debtData_);\n      const endDate = keys[keys.length - 1];\n\n      // Add 2nd doses data from before start of daily data releases\n      // Daily releases started on 2021-01-10\n      // Take the cumulative on\n      const SecondDosesToAdd = 2286572 - 391399;\n      const DaysDifference = Math.abs(\n        moment(\"2020-12-08\").diff(moment(\"2021-01-09\"), \"days\")\n      );\n      const SecondDosesToAddPerDay = SecondDosesToAdd / DaysDifference;\n\n      for (let i = 0; i <= DaysDifference; i++) {\n        let date = moment(\"2020-12-08\").add(i, \"days\");\n        let targetDate = date.add(12, \"weeks\").format(\"YYYY-MM-DD\");\n\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue += SecondDosesToAddPerDay;\n      }\n\n      // Project initial data forward\n      parsedData.map((datum) => {\n        let targetDate = moment(datum[\"date\"])\n          .add(12, \"weeks\")\n          .format(\"YYYY-MM-DD\");\n\n        // Only add if date falls in existing debt data\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue +=\n            datum.newPeopleVaccinatedFirstDoseByPublishDate;\n      });\n\n      // We need to make sure that we are not double-counting second doses if they have been done before the 12 weeks delay\n      // We computed what was expected\n      const dateTwelveWeeksAgo = moment(parsedData[parsedData.length - 1].date)\n        .subtract(12, \"weeks\")\n        .format(\"YYYY-MM-DD\");\n\n      const dataTwelveWeeksAgo = parsedData.filter(\n        (item) => item.date === dateTwelveWeeksAgo\n      );\n      const expectedSecondDoses =\n        dataTwelveWeeksAgo[0].cumPeopleVaccinatedFirstDoseByPublishDate;\n      const secondDosesDiscrepancies = Math.abs(\n        expectedSecondDoses -\n          parsedData[parsedData.length - 1]\n            .cumPeopleVaccinatedSecondDoseByPublishDate\n      );\n\n      let subtractedSecondDoses = 0;\n      let index = 0;\n      const fractionToSubtract = 0.04;\n      keys = Object.keys(debtData_);\n\n      // We subtract the discrepencies\n      while (subtractedSecondDoses <= secondDosesDiscrepancies) {\n        if (\n          debtData_[keys[index]].secondDosesDue >=\n          Math.round(fractionToSubtract * secondDosesDiscrepancies)\n        ) {\n          debtData_[keys[index]].secondDosesDue -= Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n          subtractedSecondDoses += Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n        }\n\n        index++;\n      }\n\n      let carryOver = 0;\n      let cumFirstDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedFirstDoseByPublishDate;\n      let cumSecondDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate;\n\n      const maxDoses = 53000000;\n\n      let allDosesRate;\n      if (rateForPredictions) allDosesRate = rateForPredictions;\n      else allDosesRate = RATE;\n\n      if (!currentRateForPredictions) {\n        setCurrentRateForPredictions(allDosesRate);\n        setRateForPredictions(allDosesRate);\n      }\n\n      let dateAllFirstDosesDone = null;\n\n      Object.entries(debtData_).forEach((entry, index) => {\n        const [key, value] = entry;\n\n        let secondDosesDue = value.secondDosesDue + carryOver;\n\n        value.carryOver = carryOver;\n\n        let secondDosesDone = 0;\n        let firstDosesDone = 0;\n\n        // If all first doses done --> prioritize second doses\n        if (cumFirstDoses >= maxDoses && cumSecondDoses <= maxDoses) {\n          // We only start all doses possible after 3 weeks following the last 1st dose administered\n          if (moment(value.date).diff(dateAllFirstDosesDone, \"days\") >= 21) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        } else if (cumSecondDoses <= maxDoses) {\n          // If more doses due that the rate\n          // --> second doses done are equal to the rate\n          if (secondDosesDue > allDosesRate) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        }\n\n        // Never allow second doses to overtake first doses\n        const maxSecondDoses = cumFirstDoses - cumSecondDoses;\n\n        if (cumSecondDoses + secondDosesDone > cumFirstDoses) {\n          secondDosesDone = Math.min(maxSecondDoses, secondDosesDone);\n        }\n\n        carryOver = Math.max(secondDosesDue - secondDosesDone, 0);\n        carryOver = Math.min(cumFirstDoses - cumSecondDoses, carryOver);\n        carryOver = Math.max(carryOver, 0);\n\n        let spareCapacity = Math.max(allDosesRate - secondDosesDone, 0);\n\n        if (spareCapacity > 0 && cumFirstDoses <= maxDoses) {\n          firstDosesDone = spareCapacity;\n\n          let targetDate = moment(value.date)\n            .add(12, \"weeks\")\n            .format(\"YYYY-MM-DD\");\n\n          if (targetDate in debtData_)\n            debtData_[targetDate].secondDosesDue += firstDosesDone;\n          else console.log(targetDate);\n        }\n\n        cumFirstDoses = cumFirstDoses + firstDosesDone;\n        cumSecondDoses = cumSecondDoses + secondDosesDone;\n\n        if (cumFirstDoses >= maxDoses && !dateAllFirstDosesDone)\n          dateAllFirstDosesDone = moment(value.date);\n\n        value.firstDosesDone = firstDosesDone;\n        value.secondDosesDone = secondDosesDone;\n        value.cumFirstDoses = cumFirstDoses;\n        value.cumSecondDoses = cumSecondDoses;\n      });\n\n      // const debtDataToPlot = [];\n\n      const debtDataToPlot = parsedData.map((datum) => {\n        return {\n          date: datum.date,\n          week: moment(datum.date).week(),\n          cumFirstDoses: datum.cumPeopleVaccinatedFirstDoseByPublishDate,\n          cumSecondDoses: datum.cumPeopleVaccinatedSecondDoseByPublishDate,\n          firstDosesDone: datum.newPeopleVaccinatedFirstDoseByPublishDate,\n          secondDosesDone: datum.newPeopleVaccinatedSecondDoseByPublishDate,\n          predicted: false,\n        };\n      });\n\n      for (const [key, value] of Object.entries(debtData_)) {\n        debtDataToPlot.push(value);\n      }\n\n      // console.log(\n      //   parsedData[parsedData.length - 1]\n      //     .cumPeopleVaccinatedSecondDoseByPublishDate +\n      //     _.sumBy(debtDataToPlot, \"secondDosesDue\")\n      // );\n\n      setDebtData(debtDataToPlot);\n      setWeeklyDebtData(convertToWeeklyData(debtDataToPlot));\n\n      // Compute statistics for 1st and 2nd doses\n      setStatistics(computeStatistics(parsedData));\n\n      setLoading(false);\n    }\n  }, [parsedData, rateForPredictions]);\n\n  console.log(loading);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <PredictedTimeline parsedData={parsedData} debtData={debtData} />\n\n        <Header as={\"h2\"}>\n          <Header.Content>📊 Data Analysis and Visualisations</Header.Content>\n          <Header.Subheader>\n            Data exploration, statistics, and visualisations solely based on\n            historical data. No predictions or projections involved.\n          </Header.Subheader>\n        </Header>\n\n        {showTweets &&\n          statistics &&\n          generateTweetHistoricalData(parsedData, statistics, updateDate)}\n\n        <GenericContainer\n          ChildComponent={\n            <StatisticsOverall\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"Overall Progress 💉 \"\n          description=\"Key figures for overall progress of vaccine roll-out\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsCombinedDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"1️⃣ + 2️⃣ All Doses\"\n          description=\"Combined figures for 1st and 2nd doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsFirstDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"1️⃣ First Doses\"\n          description=\"Figures for 1st doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsSecondDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"2️⃣ Second Doses\"\n          description=\"Figures for 2nd doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <Header as={\"h2\"}>\n          <Header.Content>🔮 Projections and Predictions</Header.Content>\n          <Header.Subheader>\n            Projections and predictions using various models and statistical\n            techniques. Those figures and visualisations are indicative only,\n            and are always subject to change when new data becomes available.\n          </Header.Subheader>\n        </Header>\n        <Segment>\n          <Header as={\"h4\"}>\n            <Header.Content>Prediction Parameters</Header.Content>\n            <Header.Subheader>\n              Update the parameters used for the predictions below.\n            </Header.Subheader>\n          </Header>\n          Combined rate:{\" \"}\n          <Dropdown\n            options={options}\n            selection\n            select\n            defaultValue={currentRateForPredictions}\n            value={rateForPredictions}\n            onChange={(a, b) => {\n              setLoading(true);\n              setRateForPredictions(b.value);\n            }}\n            loading={loading}\n          />\n        </Segment>\n        {/* <GenericContainer\n          ChildComponent={\n            <ScoreCardGroupWithDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        /> */}\n        <GenericContainer\n          ChildComponent={\n            <SecondDoseDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              weeklyDebtData={weeklyDebtData}\n              rateForPredictions={rateForPredictions}\n            />\n          }\n          title=\"Projected Timeline\"\n          description=\"Projected timeline taking into account the second doses debt. A strict 12-week delay is introduced between 1st and 2nd doses until all 1st doses are administered, after which 2nd doses are done as soon as possible regardless of the delay. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport {\n  Container,\n  Message,\n} from \"semantic-ui-react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Container>\n    <Message info style={{marginTop:\"200px\"}}>\n          <Message.Header>We will be back! </Message.Header>\n          <p>\n            This website has not been updated for some time due to technical difficulties. Instead of showing outdated information, we decied to take it offline until we get the time to resolve these issues. Until then,\n            please visit the official <a href=\"https://coronavirus.data.gov.uk/\">UK COVID dashboard</a> for updates. Be safe!\n          </p>\n        </Message>\n        </Container>\n      {/* <App /> */}\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}