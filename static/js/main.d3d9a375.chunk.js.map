{"version":3,"sources":["data/ImportantValues.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","components/GenericContainer.js","components/ScoreCardWithDebt.js","components/ScoreCardGroupWithDebt.js","components/VaccineStatisticsCompactCard.js","components/VaccineStatisticsCompact.js","components/SecondDoseDebt.js","assets/logo.png","utils/compute_utils.js","components/PredictedTimeline.js","App.js","reportWebVitals.js","index.js"],"names":["TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","CustomBarLabel","x","y","fill","value","width","viewBox","height","dx","dy","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","parsedData","data","length","ResponsiveContainer","BarChart","layout","margin","top","right","left","bottom","XAxis","type","domain","hide","YAxis","tick","Legend","verticalAlign","align","wrapperStyle","paddingLeft","formatter","entry","index","Bar","dataKey","background","label","isAnimationActive","ReferenceLine","stroke","strokeDasharray","Label","position","fontSize","fontStyle","CustomizedAxisTick","payload","moment","format","DailyRatesPlot","aspect","ComposedChart","CartesianGrid","date","tickFormatter","Intl","NumberFormat","Text","offset","angle","Tooltip","name","stackId","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","Card","fluid","Content","Header","Meta","Description","textAlign","extra","Icon","ScoreCardWithDebt","debtData","targetDate","targetIndividuals","doseType","predictionCallback","visible","useState","eventDay","setEventDay","dosesColumn","setDosesColumn","useEffect","find","datum","cumFirstDoses","cumSecondDoses","delta","Math","round","diff","progressContent","style","marginTop","paddingBottom","size","color","marginLeft","marginRight","abs","Grid","Column","centered","Segment","basic","maxWidth","as","Subheader","ScoreCardGroupWithDebt","showTweets","predictionAdultsFirst","setPredictionAdultsFirst","predictionAdultsSecond","setPredictionAdultsSecond","predictionPriorityFirst","setPredictionPriorityFirst","predictionPrioritySecond","setPredictionPrioritySecond","stackable","columns","Row","VaccineStatisticsCompactCard","mainFigure","dayOnDay","dayOnDayPercent","weekOnWeek","weekOnWeekPercent","dataToPlot","disableDeltaRounding","compact","Statistic","Value","filter","item","VaccineStatisticsCompact","loaded","setLoaded","allDosesStatistics","setAllDosesStatistics","firstDosesStatistics","setFirstDosesStatistics","secondDosesStatistics","setSecondDosesStatistics","latestIndex","total","totalDayOnDay","totalDayOnDayPercent","totalWeekOnWeek","totalWeekOnWeekPercent","new","newDayOnDayPercent","newDayOnDay","newWeekOnWeek","newWeekOnWeekPercent","completedCourses","completedCoursesWeekOnWeek","completedCoursesDayOnDay","sevenDaysRate","sevenDaysRateDayOnDay","sevenDaysRateDayOnDayPercent","sevenDaysRateWeekOnWeek","sevenDaysRateWeekOnWeekPercent","adultPopulationDone","adultPopulationDoneDayOnDay","adultPopulationDoneWeekOnWeek","priorityGroupsDone","priorityGroupsDoneDayOnDay","priorityGroupsDoneWeekOnWeek","repeat","ceil","subtract","dividing","Group","marginBottom","Progress","percent","progress","SecondDoseDebt","weeklyDebtData","rateForPredictions","LineChart","locale","computeAverageRate","days","fromKey","toKey","forEach","_","mean","slice","a","PredictedTimeline","App","setShowTweets","setParsedData","updateDate","setUpdateDate","setDebtData","setWeeklyDebtData","setRateForPredictions","currentRateForPredictions","setCurrentRateForPredictions","location","useLocation","URLSearchParams","search","get","rawData","vaccination_json","sort","b","Date","latestDate","add","RATE","sevenDaysRateSecond","debtData_","startDate","i","secondDosesDone","firstDosesDone","secondDosesCarryOverFromPreviousDay","secondDosesNewFromDay","spareCapacity","secondDosesDue","week","keys","Object","DaysDifference","SecondDosesToAddPerDay","console","log","newPeopleVaccinatedFirstDoseByPublishDate","allDosesRate","carryOver","cumPeopleVaccinatedFirstDoseByPublishDate","cumPeopleVaccinatedSecondDoseByPublishDate","maxDoses","dateAllFirstDosesDone","entries","max","debtDataToPlot","push","fieldsToAverage","weeklyData","minWeek","maxWeek","filteredData","weekData","field","meanBy","startOf","convertToWeeklyData","className","Container","Image","src","logo","circular","bordered","Message","info","href","raised","List","bulleted","Item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3d9a375.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 53000000;\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-07-31\"; // Based on new target https://news.sky.com/story/covid-19-all-adults-to-be-offered-vaccine-by-end-of-july-under-pms-accelerated-plan-12224309\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={135}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 30,\n            right: 0,\n            left: 0,\n            bottom: 30,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            layout=\"horizontal\"\n            height={20}\n            align=\"center\"\n            wrapperStyle={{\n              top: 0,\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" aspect={2.5}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          />\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import React from \"react\";\nimport { Card, Icon } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n}) => {\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { Grid, Segment, Header, Icon } from \"semantic-ui-react\";\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport moment from \"moment\";\n\nconst ScoreCardWithDebt = ({\n  debtData,\n  parsedData,\n  targetDate,\n  targetIndividuals,\n  title,\n  doseType,\n  predictionCallback,\n  visible,\n}) => {\n  const [eventDay, setEventDay] = useState(null);\n  const [dosesColumn, setDosesColumn] = useState(null);\n\n  useEffect(() => {\n    if (debtData) {\n      if (doseType === \"first\") {\n        setEventDay(\n          debtData.find((datum) => datum.cumFirstDoses >= targetIndividuals)\n        );\n        setDosesColumn(\"cumPeopleVaccinatedFirstDoseByPublishDate\");\n      } else {\n        setEventDay(\n          debtData.find((datum) => datum.cumSecondDoses >= targetIndividuals)\n        );\n        setDosesColumn(\"cumPeopleVaccinatedSecondDoseByPublishDate\");\n      }\n    }\n  }, [debtData]);\n\n  useEffect(() => {\n    if (eventDay)\n      predictionCallback({\n        eventDay: eventDay,\n        delta: Math.round(\n          moment(eventDay.date).diff(moment(targetDate), \"days\")\n        ),\n      });\n  }, [eventDay]);\n\n  if (eventDay && parsedData) {\n    let progressContent;\n\n    const delta = Math.round(\n      moment(eventDay.date).diff(moment(targetDate), \"days\")\n    );\n\n    if (!targetDate) {\n      progressContent = (\n        <Fragment>\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>{moment(eventDay.date).format(\"DD MMMM\")}</b>\n          </div>\n        </Fragment>\n      );\n    } else if (delta > 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"warning circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"red\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.abs(delta)}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} late\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else if (delta < 0) {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            <b>\n              {Math.round(Math.abs(delta))}\n              &nbsp; {Math.abs(delta) === 1 ? \"day\" : \"days\"} early\n            </b>\n            <p>({moment(eventDay.date).format(\"DD MMMM\")})</p>\n          </div>\n        </Fragment>\n      );\n    } else {\n      progressContent = (\n        <Fragment>\n          <Icon\n            name=\"check circle\"\n            style={{ marginTop: -5, paddingBottom: 40 }}\n            size=\"big\"\n            color=\"green\"\n          />\n          <div\n            style={{\n              marginTop: -5,\n              fontSize: 14,\n              marginLeft: 25,\n              marginRight: 25,\n              textAlign: \"center\",\n            }}\n          >\n            Predicted to hit target on the day!\n          </div>\n        </Fragment>\n      );\n    }\n\n    if (!visible) return null;\n\n    return (\n      <Grid.Column width={4} textAlign=\"center\">\n        <Grid centered>\n          <Segment\n            basic\n            style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n            textAlign=\"center\"\n          >\n            <Header as=\"h4\" textAlign=\"center\">\n              <Header.Content>{title}</Header.Content>\n              <Header.Subheader>\n                {`${targetIndividuals / 1000000}M 1st doses by ${moment(\n                  targetDate\n                ).format(\"DD MMM\")}`}\n              </Header.Subheader>\n            </Header>\n            <CircularProgressbarWithChildren\n              value={\n                (parsedData[parsedData.length - 1][dosesColumn] /\n                  targetIndividuals) *\n                100\n              }\n            >\n              {progressContent}\n            </CircularProgressbarWithChildren>\n          </Segment>\n        </Grid>\n      </Grid.Column>\n    );\n  } else return null;\n  // return null;\n};\n\nexport default ScoreCardWithDebt;\n","import React, { Fragment, useState } from \"react\";\nimport {\n  TARGET_ALL_GROUPS_DATE,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_DATE,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\nimport { Grid, Segment, Header, Icon, Divider } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nimport ScoreCardWithDebt from \"./ScoreCardWithDebt\";\n\nconst ScoreCardGroupWithDebt = ({\n  parsedData,\n  debtData,\n  showTweets,\n  dateUpdated,\n}) => {\n  const [predictionAdultsFirst, setPredictionAdultsFirst] = useState(null);\n  const [predictionAdultsSecond, setPredictionAdultsSecond] = useState(null);\n  const [predictionPriorityFirst, setPredictionPriorityFirst] = useState(null);\n  const [predictionPrioritySecond, setPredictionPrioritySecond] = useState(\n    null\n  );\n\n  return (\n    <Grid stackable centered columns={3}>\n      {/* <span></span>\n      <Divider horizontal>First Doses</Divider> */}\n      {showTweets &&\n        predictionPriorityFirst &&\n        predictionPriorityFirst.eventDay &&\n        predictionPrioritySecond &&\n        predictionPrioritySecond.eventDay && (\n          <Fragment>\n            <Segment textAlign=\"left\">\n              Targets scorecards 🎯 on {moment(dateUpdated).format(\"DD MMMM\")}\n              <br />\n              <br />\n              {predictionPriorityFirst.delta < 0 ? \"✅\" : \"❌\"}32M by 15 Apr (\n              {Math.abs(predictionPriorityFirst.delta)} days{\" \"}\n              {predictionPriorityFirst.delta < 0 ? \"early\" : \"late\"} on{\" \"}\n              {moment(predictionPriorityFirst.eventDay.date).format(\"DD/MM\")}\n              )\n              <br />\n              {predictionAdultsFirst.delta < 0 ? \"✅\" : \"❌\"}53M by 31 Jul (\n              {Math.abs(predictionAdultsFirst.delta)} days{\" \"}\n              {predictionAdultsFirst.delta < 0 ? \"early\" : \"late\"} on{\" \"}\n              {moment(predictionAdultsFirst.eventDay.date).format(\"DD/MM\")})\n              <br />\n              <br />\n              Those predictions are for 1st doses, and take into account the\n              current combined 7-day average as well as the growing second doses\n              debt.\n              <br />\n              <br />\n              #vaccine #COVIDVaccine\n            </Segment>\n            <Segment textAlign=\"left\">\n              🔮Predicted Timeline Update on{\" \"}\n              {moment(dateUpdated).format(\"DD MMMM\")}\n              <br />\n              <br />\n              {moment(predictionPriorityFirst.eventDay.date).format(\"D MMMM\")}\n              ➡️All Priority Groups received a 1st dose\n              <br />\n              {moment(predictionAdultsFirst.eventDay.date).format(\"D MMMM\")}\n              ➡️All Adults received a 1st dose\n              <br />\n              {moment(predictionPrioritySecond.eventDay.date).format(\"D MMMM\")}\n              ➡️All Priority Groups received 2 doses\n              <br />\n              {moment(predictionAdultsSecond.eventDay.date).format(\"D MMMM\")}\n              ➡️All Adults received 2 doses\n              <br />\n              <br />\n              Based on current trends, supply, and second doses debt\n            </Segment>\n          </Fragment>\n        )}\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ALL_GROUPS_DATE}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n          doseType=\"first\"\n          predictionCallback={setPredictionPriorityFirst}\n          visible={true}\n        />\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetDate={TARGET_ADULT_POPULATION_DATE}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"Adult Population\"\n          doseType=\"first\"\n          predictionCallback={setPredictionAdultsFirst}\n          visible={true}\n        />\n      </Grid.Row>\n      <Grid.Row textAlign=\"center\" centered>\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetIndividuals={TARGET_ALL_GROUPS_INDIVIDUALS}\n          title=\"All Priority Groups\"\n          doseType=\"second\"\n          predictionCallback={setPredictionPrioritySecond}\n          visible={false}\n        />\n        <ScoreCardWithDebt\n          debtData={debtData}\n          parsedData={parsedData}\n          targetIndividuals={TARGET_ADULT_POPULATION_INDIVIDUALS}\n          title=\"All Adults\"\n          doseType=\"second\"\n          predictionCallback={setPredictionAdultsSecond}\n          visible={false}\n        />\n      </Grid.Row>\n    </Grid>\n  );\n};\nexport default ScoreCardGroupWithDebt;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst VaccineStatisticsCompactCard = ({\n  title,\n  description,\n  mainFigure,\n  dayOnDay,\n  dayOnDayPercent,\n  weekOnWeek,\n  weekOnWeekPercent,\n  dataToPlot,\n  disableDeltaRounding,\n}) => {\n  const getDayOnDay = () => {\n    if (dayOnDay)\n      return (\n        <Fragment>\n          {dayOnDay > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Day: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(dayOnDay.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(dayOnDay))}</b>\n          )}\n          {dayOnDayPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(dayOnDayPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n          <br />\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getWeekOnWeek = () => {\n    if (weekOnWeek)\n      return (\n        <Fragment>\n          {weekOnWeek > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Week: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(weekOnWeek.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(weekOnWeek))}</b>\n          )}\n          {weekOnWeekPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(weekOnWeekPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getPlot = () => {\n    if (dataToPlot) {\n      dataToPlot = dataToPlot.filter(\n        (item) => item.data != null && item.data != 0\n      );\n\n      return (\n        <BarChart\n          width={250}\n          height={50}\n          data={dataToPlot}\n          margin={{\n            top: 10,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"date\" hide={true} />\n          <Tooltip\n            formatter={(value, name) => {\n              return [new Intl.NumberFormat(\"en\").format(value)];\n            }}\n          />\n          <Bar type=\"monotone\" dataKey=\"data\" fill=\"#8884d8\" />\n        </BarChart>\n      );\n    } else return null;\n  };\n\n  return (\n    <Card textAlign=\"left\" compact>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>\n          <Statistic size=\"tiny\">\n            <Statistic.Value>{mainFigure}</Statistic.Value>\n          </Statistic>\n        </Card.Description>\n\n        <Card.Description>\n          {getDayOnDay()}\n          {getWeekOnWeek()}\n          {getPlot()}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default VaccineStatisticsCompactCard;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst VaccineStatisticsCompact = ({ parsedData, showTweets, dateUpdated }) => {\n  const [loaded, setLoaded] = useState(null);\n\n  const [allDosesStatistics, setAllDosesStatistics] = useState(null);\n  const [firstDosesStatistics, setFirstDosesStatistics] = useState(null);\n  const [secondDosesStatistics, setSecondDosesStatistics] = useState(null);\n\n  useEffect(() => {\n    if (parsedData) {\n      const latestIndex = parsedData.length - 1;\n\n      setAllDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        totalWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDayPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 1][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          (parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]),\n        newWeekOnWeekPercent:\n          (parsedData[latestIndex][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ] +\n            parsedData[latestIndex][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ]) /\n            (parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] +\n              parsedData[latestIndex - 7][\n                \"newPeopleVaccinatedSecondDoseByPublishDate\"\n              ]) -\n          1,\n        completedCourses:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        completedCoursesWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        completedCoursesDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ],\n        sevenDaysRate:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] +\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          (parsedData[latestIndex][\"sevenDaysRate\"] +\n            parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n            (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n              parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n          1,\n      });\n\n      setFirstDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedFirstDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedFirstDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRate\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRate\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n          32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n\n      setSecondDosesStatistics({\n        total:\n          parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n        totalDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalDayOnDayPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        totalWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n\n        totalWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        new:\n          parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n        newDayOnDay:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newDayOnDayPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 1][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        newWeekOnWeek:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] -\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ],\n        newWeekOnWeekPercent:\n          parsedData[latestIndex][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            parsedData[latestIndex - 7][\n              \"newPeopleVaccinatedSecondDoseByPublishDate\"\n            ] -\n          1,\n        sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n        sevenDaysRateDayOnDay:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateDayOnDayPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n          1,\n        sevenDaysRateWeekOnWeek:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n        sevenDaysRateWeekOnWeekPercent:\n          parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n            parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n          1,\n        adultPopulationDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 53000000,\n        adultPopulationDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        adultPopulationDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            53000000,\n        priorityGroupsDone:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] / 32000000,\n        priorityGroupsDoneDayOnDay:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n        priorityGroupsDoneWeekOnWeek:\n          parsedData[latestIndex][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000 -\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ] /\n            32000000,\n      });\n      setLoaded(true);\n    }\n  }, [parsedData]);\n\n  if (loaded)\n    return (\n      <Grid>\n        <Grid.Row>\n          {showTweets && (\n            <Fragment>\n              <Segment textAlign=\"left\">\n                📈{moment(dateUpdated).format(\"DD MMMM\")} Progress Tracker📈\n                <br />\n                <br />\n                1️⃣ 1st Dose\n                <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(firstDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(firstDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(firstDosesStatistics.priorityGroupsDone * 20)\n                )}{\" \"}\n                {(firstDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                2️⃣ 2nd Dose <br />\n                Adults{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.adultPopulationDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.adultPopulationDone * 100).toFixed(0)}%\n                <br />\n                Priority{\" \"}\n                {\"▓\".repeat(\n                  Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}\n                {\"░\".repeat(\n                  20 - Math.ceil(secondDosesStatistics.priorityGroupsDone * 20)\n                )}{\" \"}\n                {(secondDosesStatistics.priorityGroupsDone * 100).toFixed(0)}%\n                <br />\n                <br />\n                #vaccine\n              </Segment>\n              <Segment textAlign=\"left\">\n                1️⃣ First Doses Update on {moment(dateUpdated).format(\"DD MMMM\")}{\" \"}\n                📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 1st Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(firstDosesStatistics.total)}\n                <br />\n                <br />\n                {firstDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {firstDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(firstDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    firstDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n              <Segment textAlign=\"left\">\n                2️⃣ Second Doses Update on{\" \"}\n                {moment(dateUpdated).format(\"DD MMMM\")} 📢\n                <br />\n                <br />\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.new)} new\n                doses administered yesterday (\n                {moment(dateUpdated).subtract(1, \"days\").format(\"DD MMMM\")})\n                across the UK🇬🇧\n                <br />\n                <br />\n                Total 2nd Doses:{\" \"}\n                {Intl.NumberFormat(\"en\").format(secondDosesStatistics.total)}\n                <br />\n                <br />\n                {secondDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newDayOnDayPercent * 100)\n                )}\n                % day on day rate <br />\n                {secondDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n                {Math.abs(\n                  Math.round(secondDosesStatistics.newWeekOnWeekPercent * 100)\n                )}\n                % week on week rate <br />\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"📈\"\n                  : \"📉\"}\n                7-day average of{\" \"}\n                {Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}{\" \"}\n                (\n                {secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n                  ? \"+\"\n                  : \"-\"}\n                {Math.abs(\n                  Math.round(\n                    secondDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n                  )\n                )}\n                % week on week)\n                <br />\n                <br />\n                #vaccine #COVID19\n              </Segment>\n            </Fragment>\n          )}\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>💉 Overall Progress</Header.Content>\n            </Header>\n            <Card.Group>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Adult Population</Card.Header>\n                  <Card.Meta>53M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      color=\"blue\"\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.adultPopulationDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.adultPopulationDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.adultPopulationDoneWeekOnWeek *\n                        100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <Card textAlign=\"left\" compact>\n                <Card.Content>\n                  <Card.Header>Priority Groups</Card.Header>\n                  <Card.Meta>32M individuals</Card.Meta>\n\n                  <Card.Description>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      First Doses\n                    </Header>\n                    <Progress\n                      percent={(\n                        firstDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      color=\"blue\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        firstDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                  <Card.Description style={{ marginTop: \"5px\" }}>\n                    <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                      Second Doses\n                    </Header>\n                    <Progress\n                      color=\"green\"\n                      percent={(\n                        secondDosesStatistics.priorityGroupsDone * 100\n                      ).toFixed(0)}\n                      progress\n                      size=\"small\"\n                      style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n                    />\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneDayOnDay * 100\n                      ).toFixed(1)}\n                    </b>\n                    % &nbsp;\n                    <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n                    <b>\n                      {(\n                        secondDosesStatistics.priorityGroupsDoneWeekOnWeek * 100\n                      ).toFixed(1)}\n                    </b>\n                    %\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n              <VaccineStatisticsCompactCard\n                title=\"Completed Courses\"\n                description=\"Fraction of completed courses\"\n                mainFigure={\n                  (allDosesStatistics.completedCourses * 100).toFixed(1) + \"%\"\n                }\n                dayOnDay={allDosesStatistics.completedCoursesDayOnDay * 100}\n                weekOnWeek={allDosesStatistics.completedCoursesWeekOnWeek * 100}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                  };\n                })}\n                disableDeltaRounding={true}\n              />\n            </Card.Group>\n          </Segment>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ + 2️⃣ All Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"Inoculations so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.total\n                )}\n                dayOnDay={allDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={allDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"Number of new inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  allDosesStatistics.new\n                )}\n                dayOnDay={allDosesStatistics.newDayOnDay}\n                dayOnDayPercent={allDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={allDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={allDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data:\n                      item[\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n                      item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for inoculations\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(allDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={allDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  allDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={allDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  allDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"] + item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>1️⃣ First Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"1st Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.total\n                )}\n                dayOnDay={firstDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  firstDosesStatistics.new\n                )}\n                dayOnDay={firstDosesStatistics.newDayOnDay}\n                dayOnDayPercent={firstDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={firstDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={firstDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 1st Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(firstDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={firstDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  firstDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={firstDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  firstDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n        <Grid.Row>\n          <Segment basic textAlign=\"left\">\n            <Header as=\"h3\" dividing textAlign=\"left\">\n              <Header.Content>2️⃣ Second Doses</Header.Content>\n            </Header>\n            <Card.Group>\n              <VaccineStatisticsCompactCard\n                title=\"Cumulative\"\n                description=\"2nd Doses so far\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.total\n                )}\n                dayOnDay={secondDosesStatistics.totalDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.totalDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.totalWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.totalWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"Daily Rate\"\n                description=\"New 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  secondDosesStatistics.new\n                )}\n                dayOnDay={secondDosesStatistics.newDayOnDay}\n                dayOnDayPercent={secondDosesStatistics.newDayOnDayPercent}\n                weekOnWeek={secondDosesStatistics.newWeekOnWeek}\n                weekOnWeekPercent={secondDosesStatistics.newWeekOnWeekPercent}\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n              <VaccineStatisticsCompactCard\n                title=\"7-Day Average\"\n                description=\"7-Day Average for 2nd Doses\"\n                mainFigure={Intl.NumberFormat(\"en\").format(\n                  Math.round(secondDosesStatistics.sevenDaysRate)\n                )}\n                dayOnDay={secondDosesStatistics.sevenDaysRateDayOnDay}\n                dayOnDayPercent={\n                  secondDosesStatistics.sevenDaysRateDayOnDayPercent\n                }\n                weekOnWeek={secondDosesStatistics.sevenDaysRateWeekOnWeek}\n                weekOnWeekPercent={\n                  secondDosesStatistics.sevenDaysRateWeekOnWeekPercent\n                }\n                dataToPlot={parsedData.map((item) => {\n                  return {\n                    data: item[\"sevenDaysRateSecond\"],\n                    date: item[\"date\"],\n                  };\n                })}\n              />\n            </Card.Group>\n          </Segment>\n        </Grid.Row>\n      </Grid>\n    );\n  else return null;\n};\n\nexport default VaccineStatisticsCompact;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport moment from \"moment\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  CartesianGrid,\n  ReferenceLine,\n  Label,\n  ComposedChart,\n  Legend,\n  Line,\n  Text,\n  Tooltip,\n  LineChart,\n  Bar,\n  YAxis,\n  BarChart,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Grid, Segment, Header } from \"semantic-ui-react\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\nimport _, { forEach } from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst SecondDoseDebt = ({\n  parsedData,\n  debtData,\n  weeklyDebtData,\n  rateForPredictions,\n}) => {\n  if (debtData)\n    return (\n      <Fragment>\n        <Header as=\"h4\">\n          Weekly Doses Prediction\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <BarChart\n            data={weeklyDebtData}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 40,\n              bottom: 30,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"firstDosesDone\":\n                    return \"First Dose\";\n\n                  case \"secondDosesDone\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"weekFirstDay\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Week\" }}\n            />\n            <YAxis\n              label={\n                <Text x={0} y={0} dx={30} dy={245} offset={0} angle={-90}>\n                  Daily Vaccinations\n                </Text>\n              }\n              tickFormatter={(value) =>\n                new Intl.NumberFormat(\"en\").format(value)\n              }\n            />\n            <Bar dataKey=\"firstDosesDone\" stackId=\"a\" fill=\"#8884d8\" />\n            <Bar dataKey=\"secondDosesDone\" stackId=\"a\" fill=\"#82ca9d\" />\n          </BarChart>\n        </ResponsiveContainer>\n        <Header as=\"h4\">\n          Cumulative Doses Predictions\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            data={debtData}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              domain={[0, 60000000]}\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n            <ReferenceLine\n              stroke=\"red\"\n              y=\"32000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomLeft\",\n                value: \"Priority Groups \",\n                fontSize: 16,\n              }}\n            />\n            <ReferenceLine\n              stroke=\"blue\"\n              y=\"53000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomLeft\",\n                value: \"All Adults\",\n                fontSize: 16,\n              }}\n            />\n            <Line\n              dataKey=\"cumFirstDoses\"\n              dot={false}\n              stroke=\"#8884d8\"\n              strokeWidth={3}\n            />\n            <Line\n              dataKey=\"cumSecondDoses\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </Fragment>\n    );\n  else return null;\n};\n\nexport default SecondDoseDebt;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import _ from \"lodash\";\nimport moment from \"moment\";\nmoment.locale(\"en-gb\");\n\nexport const computeAverageRate = (data, days, fromKey, toKey) => {\n  data.forEach((datum, index) => {\n    if (index >= 6) {\n      data[index][toKey] = _.mean(\n        data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n      );\n    } else data[index][toKey] = null;\n  });\n\n  return data;\n};\n\nexport const predictDebtIntoFuture = (\n  data,\n  allDosesRate,\n  firstDosesColumn,\n  maxFirstDoses,\n  initialCumFirstDoses,\n  initialCumSecondDoses\n) => {\n  let carryOver = 0;\n  let secondDosesDue = 0;\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n\n  const debtData_ = data.map((datum, index) => {\n    // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n    secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n    let secondDosesDueRecord = secondDosesDue;\n    let carryOverRecord = carryOver;\n\n    let secondDosesDone = 0;\n\n    if (\n      index > 0 &&\n      cumFirstDoses >= maxFirstDoses &&\n      cumSecondDoses <= maxFirstDoses\n    ) {\n      secondDosesDone = allDosesRate;\n    } else {\n      if (secondDosesDue >= allDosesRate) {\n        secondDosesDone = allDosesRate;\n        carryOver = secondDosesDue - allDosesRate;\n      } else {\n        secondDosesDone = secondDosesDue;\n        carryOver = 0;\n      }\n    }\n\n    let spareCapacity = allDosesRate - secondDosesDone;\n    let firstDosesDone = 0;\n\n    if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n      firstDosesDone = spareCapacity;\n\n    secondDosesDue -= secondDosesDue;\n\n    if (index == 0) {\n      if (initialCumFirstDoses && initialCumSecondDoses) {\n        cumFirstDoses = initialCumFirstDoses;\n        cumSecondDoses = initialCumSecondDoses;\n      } else {\n        cumFirstDoses = firstDosesDone;\n        cumSecondDoses = secondDosesDone;\n      }\n    } else {\n      cumFirstDoses += firstDosesDone;\n      cumSecondDoses += secondDosesDone;\n    }\n\n    return {\n      date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: carryOverRecord,\n      secondDosesNewFromDay: datum[firstDosesColumn],\n      spareCapacity: spareCapacity,\n      secondDosesDue: secondDosesDueRecord,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    };\n  });\n\n  return debtData_;\n};\n\nexport const fillDataWithConstantRate = (\n  initialData,\n  daysToFill,\n  rate,\n  cumFirstDosesColumn,\n  cumSecondDosesColumn,\n  maxFirstDoses\n) => {\n  let fillData = [];\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n  let firstDosesDone = 0;\n  let secondDosesDone = 0;\n\n  for (let i = 1; i < daysToFill; i++) {\n    let maxFirstDosesReached = false;\n    let maxSecondDosesReached = false;\n\n    if (i == 1) {\n      if (\n        initialData[initialData.length - 1][cumFirstDosesColumn] >=\n        maxFirstDoses\n      )\n        maxFirstDosesReached = true;\n      if (\n        initialData[initialData.length - 1][cumSecondDosesColumn] >=\n        maxFirstDoses\n      )\n        maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else {\n        console.log(\"Should never reach this\");\n      }\n    } else {\n      if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n      if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumSecondDoses += rate;\n        firstDosesDone = 0;\n        secondDosesDone = rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        // do nothing\n      } else console.log(\"Should never reach this\");\n    }\n\n    fillData.push({\n      date: moment(initialData[initialData.length - 1].date)\n        .add(i, \"day\")\n        .format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: 0,\n      secondDosesNewFromDay: 0,\n      spareCapacity: rate,\n      secondDosesDue: 0,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    });\n  }\n\n  return fillData;\n};\n\nexport const addWeekField = (data) => {\n  return data.map((datum) => {\n    datum.week = moment(datum.date).week();\n    return datum;\n  });\n};\n\nexport const convertToWeeklyData = (data) => {\n  const fieldsToAverage = [\n    \"cumFirstDoses\",\n    \"cumSecondDoses\",\n    \"firstDosesDone\",\n    \"secondDosesDone\",\n    \"spareCapacity\",\n  ];\n\n  const weeklyData = [];\n\n  const minWeek = data[0].week;\n  const maxWeek = data[data.length - 1].week;\n\n  for (let i = minWeek; i <= maxWeek; i++) {\n    const filteredData = data.filter((item) => item.week === i);\n\n    let weekData = {};\n\n    fieldsToAverage.forEach((field) => {\n      weekData[field] = _.meanBy(filteredData, field);\n    });\n\n    weekData[\"week\"] = i;\n\n    weekData[\"weekFirstDay\"] = moment({ y: \"2021\" }) // get first day of the given year\n      .week(i) // get the first week according locale\n      .startOf(\"week\") // get the first day of the week according locale\n      .format(\"YYYY-MM-DD\");\n    weeklyData.push(weekData);\n  }\n\n  return weeklyData;\n};\n","import React from \"react\";\n\nconst PredictedTimeline = ({ parsedData, debtData }) => {\n  return null;\n};\n\nexport default PredictedTimeline;\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n} from \"semantic-ui-react\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport VaccineStatisticsCompact from \"./components/VaccineStatisticsCompact\";\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport { computeAverageRate, convertToWeeklyData } from \"./utils/compute_utils\";\nimport PredictedTimeline from \"./components/PredictedTimeline\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nfunction App() {\n  const [showTweets, setShowTweets] = useState(false);\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n  const [debtData, setDebtData] = useState(null);\n  const [weeklyDebtData, setWeeklyDebtData] = useState(null);\n  const [rateForPredictions, setRateForPredictions] = useState(null);\n  const [currentRateForPredictions, setCurrentRateForPredictions] = useState(\n    null\n  );\n\n  let location = useLocation();\n\n  useEffect(() => {\n    let showTweetsParam = new URLSearchParams(location.search).get(\n      \"showTweets\"\n    );\n\n    if (showTweetsParam) setShowTweets(true);\n  }, [location]);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  useEffect(() => {\n    if (parsedData) {\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n      const debtData_ = {};\n\n      const startDate = moment(parsedData[parsedData.length - 1].date).add(\n        1,\n        \"days\"\n      );\n\n      // Create structure to hold the debt data\n      for (let i = 0; i < 240; i++) {\n        debtData_[moment(startDate).add(i, \"days\").format(\"YYYY-MM-DD\")] = {\n          date: moment(startDate).add(i, \"days\").format(\"YYYY-MM-DD\"),\n          secondDosesDone: 0,\n          firstDosesDone: 0,\n          secondDosesCarryOverFromPreviousDay: 0,\n          secondDosesNewFromDay: 0,\n          spareCapacity: 0,\n          secondDosesDue: 0,\n          cumFirstDoses: 0,\n          cumSecondDoses: 0,\n          week: moment(moment(startDate).add(i, \"days\")).week(),\n        };\n      }\n      let keys = Object.keys(debtData_);\n      const endDate = keys[keys.length - 1];\n\n      // Add 2nd doses data from before start of daily data releases\n      // Daily releases started on 2021-01-10\n      // Take the cumulative on\n      const SecondDosesToAdd = 2286572 - 391399;\n      const DaysDifference = Math.abs(\n        moment(\"2020-12-08\").diff(moment(\"2021-01-09\"), \"days\")\n      );\n      const SecondDosesToAddPerDay = SecondDosesToAdd / DaysDifference;\n\n      console.log(debtData_);\n\n      for (let i = 0; i <= DaysDifference; i++) {\n        let date = moment(\"2020-12-08\").add(i, \"days\");\n        let targetDate = date.add(12, \"weeks\").format(\"YYYY-MM-DD\");\n\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue += SecondDosesToAddPerDay;\n      }\n\n      // Project initial data forward\n      parsedData.map((datum) => {\n        let targetDate = moment(datum[\"date\"])\n          .add(1, \"days\")\n          .add(12, \"weeks\")\n          .format(\"YYYY-MM-DD\");\n\n        console.log(targetDate);\n\n        debtData_[targetDate].secondDosesDue +=\n          datum.newPeopleVaccinatedFirstDoseByPublishDate;\n      });\n\n      let carryOver = 0;\n      let cumFirstDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedFirstDoseByPublishDate;\n      let cumSecondDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate;\n\n      const maxDoses = 53000000;\n\n      let allDosesRate;\n      if (rateForPredictions) allDosesRate = rateForPredictions;\n      else allDosesRate = RATE;\n\n      if (!currentRateForPredictions) {\n        setCurrentRateForPredictions(allDosesRate);\n        setRateForPredictions(allDosesRate);\n      }\n\n      let dateAllFirstDosesDone = null;\n\n      Object.entries(debtData_).forEach((entry) => {\n        const [key, value] = entry;\n\n        let secondDosesDue = value.secondDosesDue + carryOver;\n\n        let secondDosesDone = 0;\n        let firstDosesDone = 0;\n\n        // If all first doses done --> prioritize second doses\n        if (cumFirstDoses >= maxDoses && cumSecondDoses <= maxDoses) {\n          // We only start all doses possible after 3 weeks following the last 1st dose administered\n          if (moment(value.date).diff(dateAllFirstDosesDone, \"days\") >= 21) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        } else if (cumSecondDoses <= maxDoses) {\n          // If more doses due that the rate\n          // --> second doses done are equal to the rate\n          if (secondDosesDue > allDosesRate) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        }\n\n        carryOver = Math.max(secondDosesDue - secondDosesDone, 0);\n\n        let spareCapacity = Math.max(allDosesRate - secondDosesDone, 0);\n\n        if (spareCapacity > 0 && cumFirstDoses <= maxDoses) {\n          firstDosesDone = spareCapacity;\n\n          let targetDate = moment(value.date)\n            .add(12, \"weeks\")\n            .format(\"YYYY-MM-DD\");\n\n          if (targetDate in debtData_)\n            debtData_[targetDate].secondDosesDue += firstDosesDone;\n          else console.log(targetDate);\n        }\n\n        cumFirstDoses = cumFirstDoses + firstDosesDone;\n        cumSecondDoses = cumSecondDoses + secondDosesDone;\n\n        if (cumFirstDoses >= maxDoses && !dateAllFirstDosesDone)\n          dateAllFirstDosesDone = moment(value.date);\n\n        value.firstDosesDone = firstDosesDone;\n        value.secondDosesDone = secondDosesDone;\n        value.cumFirstDoses = cumFirstDoses;\n        value.cumSecondDoses = cumSecondDoses;\n      });\n\n      const debtDataToPlot = [];\n\n      for (const [key, value] of Object.entries(debtData_)) {\n        debtDataToPlot.push(value);\n      }\n\n      setDebtData(debtDataToPlot);\n      setWeeklyDebtData(convertToWeeklyData(debtDataToPlot));\n    }\n  }, [parsedData, rateForPredictions]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <PredictedTimeline parsedData={parsedData} debtData={debtData} />\n\n        <Header as={\"h2\"}>\n          <Header.Content>📊 Data Analysis and Visualisations</Header.Content>\n          <Header.Subheader>\n            Data exploration, statistics, and visualisations solely based on\n            historical data. No predictions or projections involved.\n          </Header.Subheader>\n        </Header>\n        <GenericContainer\n          ChildComponent={\n            <VaccineStatisticsCompact\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Rollout Dashboard\"\n          description=\"Key numbers related to the vaccination programme.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n        />\n        <Header as={\"h2\"}>\n          <Header.Content>🔮 Projections and Predictions</Header.Content>\n          <Header.Subheader>\n            Projections and predictions using various models and statistical\n            techniques. Those figures and visualisations are indicative only,\n            and are always subject to change when new data becomes available.\n          </Header.Subheader>\n        </Header>\n        {/* <Segment>\n          <Header as={\"h4\"}>\n            <Header.Content>\n              Set Combined Daily Rate for Predictions\n            </Header.Content>\n            <Header.Subheader>\n              Change the combined daily rate (1st + 2nd doses) used for\n              predictions. This allows one to assess how different rates impact\n              the vaccination timeline.\n            </Header.Subheader>\n          </Header>\n          <Form>\n            <Form.Group>\n              <Form.Field required>\n                <Input\n                  value={Math.round(rateForPredictions)}\n                  onClick={(value) => console.log(value)}\n                />\n              </Form.Field>\n              <Form.Button\n                onClick={() => setRateForPredictions(currentRateForPredictions)}\n              >\n                Current\n              </Form.Button>\n              <Form.Button\n                onClick={() =>\n                  setRateForPredictions(currentRateForPredictions / 2)\n                }\n              >\n                Half\n              </Form.Button>\n              <Form.Button\n                onClick={() =>\n                  setRateForPredictions(currentRateForPredictions * 2)\n                }\n              >\n                Double\n              </Form.Button>\n            </Form.Group>\n          </Form>\n        </Segment> */}\n        <GenericContainer\n          ChildComponent={\n            <ScoreCardGroupWithDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n        />\n        <GenericContainer\n          ChildComponent={\n            <SecondDoseDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              weeklyDebtData={weeklyDebtData}\n              rateForPredictions={rateForPredictions}\n            />\n          }\n          title=\"Projected Timeline\"\n          description=\"Projected timeline taking into account the second doses debt. A strict 12-week delay is introduced between 1st and 2nd doses until all 1st doses are administered, after which 2nd doses are done as soon as possible regardless of the delay. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n        />\n\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}