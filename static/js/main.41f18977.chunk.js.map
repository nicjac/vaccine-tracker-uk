{"version":3,"sources":["data/ImportantValues.js","components/VaccinationProgressPlot.js","components/DailyRatesPlot.js","hooks/WindowSize.js","components/GenericContainer.js","components/Statistics/VaccineStatisticsCompactCard.js","components/Statistics/StatisticsOverall.js","components/Statistics/StatisticsFirstDoses.js","components/Statistics/StatisticsSecondDoses.js","components/Statistics/StatisticsCombinedDoses.js","components/SecondDoseDebt.js","assets/logo.png","utils/compute_utils.js","components/PredictedTimeline.js","utils/generate_tweets.js","App.js","reportWebVitals.js","index.js"],"names":["TARGET_ALL_GROUPS_INDIVIDUALS","TARGET_ADULT_POPULATION_INDIVIDUALS","CustomBarLabel","x","y","fill","value","width","viewBox","height","dx","dy","textAnchor","fontFamily","parseInt","toFixed","VaccinationProgressPlot","parsedData","data","length","ResponsiveContainer","BarChart","layout","margin","top","right","left","bottom","XAxis","type","domain","hide","YAxis","tick","Legend","verticalAlign","align","wrapperStyle","paddingLeft","formatter","entry","index","Bar","dataKey","background","label","isAnimationActive","ReferenceLine","stroke","strokeDasharray","Label","position","fontSize","fontStyle","CustomizedAxisTick","payload","moment","format","DailyRatesPlot","windowSize","useState","undefined","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","start","end","setBrushInits","console","log","aspect","ComposedChart","CartesianGrid","date","tickFormatter","Intl","NumberFormat","Text","offset","angle","Tooltip","name","stackId","map","isoWeekday","Cell","strokeWidth","Line","dot","GenericContainer","ChildComponent","title","description","dateUpdated","loading","Card","fluid","as","Segment","Content","Header","Meta","Description","textAlign","extra","Icon","VaccineStatisticsCompactCard","mainFigure","dayOnDay","dayOnDayPercent","weekOnWeek","weekOnWeekPercent","dataToPlot","disableDeltaRounding","compact","Statistic","size","Value","color","Math","round","filter","item","StatisticsOverall","statistics","showTweets","Group","centered","style","marginBottom","Progress","percent","firstDosesStatistics","adultPopulationDone","progress","marginTop","adultPopulationDoneDayOnDay","adultPopulationDoneWeekOnWeek","secondDosesStatistics","priorityGroupsDone","priorityGroupsDoneDayOnDay","priorityGroupsDoneWeekOnWeek","allDosesStatistics","completedCourses","completedCoursesDayOnDay","completedCoursesWeekOnWeek","StatisticsFirstDoses","total","totalDayOnDay","totalDayOnDayPercent","totalWeekOnWeek","totalWeekOnWeekPercent","new","newDayOnDay","newDayOnDayPercent","newWeekOnWeek","newWeekOnWeekPercent","sevenDaysRate","sevenDaysRateDayOnDay","sevenDaysRateDayOnDayPercent","sevenDaysRateWeekOnWeek","sevenDaysRateWeekOnWeekPercent","StatisticsSecondDoses","StatisticsCombinedDoses","SecondDoseDebt","debtData","weeklyDebtData","rateForPredictions","indexAllDone","setIndexAllDone","indexAllDoneWeekly","setIndexAllDoneWeekly","findIndex","cumFirstDoses","cumSecondDoses","dateStartPredicted","find","datum","predicted","indextStartPredictedWeekly","weekFirstDay","Subheader","LineChart","slice","ReferenceArea","x1","x2","locale","computeAverageRate","days","fromKey","toKey","forEach","_","mean","a","PredictedTimeline","generateTweetHistoricalData","updateDate","repeat","ceil","subtract","abs","App","setShowTweets","setParsedData","setUpdateDate","setDebtData","setWeeklyDebtData","setRateForPredictions","currentRateForPredictions","setCurrentRateForPredictions","setLoading","setStatistics","location","useLocation","options","key","text","URLSearchParams","search","get","rawData","vaccination_json","sort","b","Date","latestDate","add","RATE","sevenDaysRateSecond","debtData_","startDate","i","clone","secondDosesDone","firstDosesDone","secondDosesCarryOverFromPreviousDay","secondDosesNewFromDay","spareCapacity","secondDosesDue","week","year","keys","Object","DaysDifference","diff","SecondDosesToAddPerDay","targetDate","newPeopleVaccinatedFirstDoseByPublishDate","dateTwelveWeeksAgo","expectedSecondDoses","cumPeopleVaccinatedFirstDoseByPublishDate","secondDosesDiscrepancies","cumPeopleVaccinatedSecondDoseByPublishDate","subtractedSecondDoses","fractionToSubtract","allDosesRate","carryOver","maxDoses","dateAllFirstDosesDone","entries","maxSecondDoses","min","max","debtDataToPlot","newPeopleVaccinatedSecondDoseByPublishDate","push","fieldsToAverage","weeklyData","uniq","filteredByYear","filteredData","weekData","field","meanBy","some","startOf","convertToWeeklyData","latestIndex","computeStatistics","className","Container","Image","src","logo","circular","bordered","Message","info","href","raised","dividing","basic","List","bulleted","Item","Dropdown","selection","select","defaultValue","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41f18977.chunk.js","sourcesContent":["// Source: TABLE 2 in https://www.gov.uk/government/publications/uk-covid-19-vaccines-delivery-plan/uk-covid-19-vaccines-delivery-plan#prioritisation-1\nexport const TARGET_4_TOP_PRIORITY_GROUPS_DATE = \"2021-02-15\";\nexport const TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS = 15000000;\nexport const TARGET_ALL_GROUPS_DATE = \"2021-04-15\"; // https://www.instituteforgovernment.org.uk/explainers/coronavirus-vaccine-rollout\nexport const TARGET_ALL_GROUPS_INDIVIDUALS = 32000000;\nexport const TARGET_ADULT_POPULATION_INDIVIDUALS = 54353665; // https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates/datasets/analysisofpopulationestimatestoolforuk\nexport const TARGET_ADULT_POPULATION_DATE = \"2021-07-19\";\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Legend,\n  ReferenceLine,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS,\n  TARGET_ALL_GROUPS_INDIVIDUALS,\n  TARGET_ADULT_POPULATION_INDIVIDUALS,\n} from \"../data/ImportantValues\";\n\nconst CustomBarLabel = ({ x, y, fill, value, width, viewBox, height }) => {\n  return (\n    <text\n      x={x + width}\n      y={y}\n      dx={14}\n      dy={18}\n      textAnchor=\"start\"\n      width={width}\n      viewBox={viewBox}\n      fill={fill}\n      height={height}\n      fontFamily={\"Roboto\"}\n    >\n      {`${(parseInt(value) / 1000000).toFixed(2)}M`}\n    </text>\n  );\n};\n\nconst VaccinationProgressPlot = ({ parsedData }) => {\n  if (parsedData) {\n    const data = [parsedData[parsedData.length - 1]];\n\n    return (\n      <ResponsiveContainer width={\"100%\"} height={135}>\n        <BarChart\n          data={data}\n          layout=\"vertical\"\n          margin={{\n            top: 30,\n            right: 0,\n            left: 0,\n            bottom: 30,\n          }}\n        >\n          {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n          <XAxis type=\"number\" domain={[0, 66000000]} hide />\n          <YAxis type=\"category\" domain={[0, 0]} tick={false} hide />\n          <Legend\n            verticalAlign=\"top\"\n            layout=\"horizontal\"\n            height={20}\n            align=\"center\"\n            wrapperStyle={{\n              top: 0,\n              paddingLeft: \"0px\",\n            }}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"cumPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"cumPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                default:\n                  return \"\";\n              }\n            }}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedFirstDoseByPublishDate\"\n            fill=\"#8884d8\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <Bar\n            dataKey=\"cumPeopleVaccinatedSecondDoseByPublishDate\"\n            fill=\"#82ca9d\"\n            background={{ fill: \"#eee\" }}\n            label={<CustomBarLabel />}\n            isAnimationActive={false}\n          />\n          <ReferenceLine\n            x={TARGET_4_TOP_PRIORITY_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Top 4 Priority Groups\"\n              position=\"top\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ALL_GROUPS_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"All Priority Groups\"\n              position=\"bottom\"\n              fontSize=\"15\"\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n          <ReferenceLine\n            x={TARGET_ADULT_POPULATION_INDIVIDUALS}\n            stroke=\"red\"\n            strokeDasharray=\"3 3\"\n          >\n            <Label\n              value=\"Adult Population\"\n              position=\"top\"\n              fontSize=\"15\"\n              // dx={-60}\n              fontStyle=\"bold\"\n              fontFamily={\"Roboto\"}\n            />\n          </ReferenceLine>\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default VaccinationProgressPlot;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ComposedChart,\n  Bar,\n  Line,\n  Cell,\n  Text,\n  Legend,\n  ResponsiveContainer,\n  Brush,\n} from \"recharts\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { useWindowSize } from \"../hooks/WindowSize\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-18}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM\")}\n    </text>\n    // </g>\n  );\n};\n\nconst DailyRatesPlot = ({ parsedData }) => {\n  let windowSize = useWindowSize();\n\n  const [brushInits, setBrushInits] = useState({ start: 0, end: 0 });\n\n  useEffect(() => {\n    if (windowSize.width < 800) {\n      if (parsedData) setBrushInits({ start: parsedData.length - 30 });\n      else setBrushInits({ start: 50 });\n    }\n  }, [windowSize]);\n\n  console.log(windowSize);\n\n  if (parsedData) {\n    return (\n      <ResponsiveContainer width=\"100%\" aspect={2.5}>\n        <ComposedChart\n          data={parsedData}\n          margin={{\n            top: 10,\n            right: 30,\n            left: 45,\n            bottom: 25,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          {/* <Legend\n            verticalAlign=\"top\"\n            height={36}\n            formatter={(value, entry, index) => {\n              switch (value) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return \"First Dose\";\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return \"Second Dose\";\n\n                case \"sevenDaysRateSecond\":\n                  return \"Second Dose (7-day average)\";\n\n                default:\n                  return \"First Dose (7-day average)\";\n              }\n            }}\n          /> */}\n          <XAxis\n            dataKey=\"date\"\n            tick={<CustomizedAxisTick />}\n            domain={[\n              parsedData[0].date,\n              parsedData[parsedData.length - 1].date,\n            ]}\n            label={{ dy: 30, value: \"Reporting Date\" }}\n          />\n          <YAxis\n            // domain={[0, 20000000]}\n            tickFormatter={(value) => new Intl.NumberFormat(\"en\").format(value)}\n            label={\n              <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                Individuals Vaccinated\n              </Text>\n            }\n          />\n          <Tooltip\n            formatter={(value, name) => {\n              switch (name) {\n                case \"newPeopleVaccinatedFirstDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose\",\n                  ];\n\n                case \"newPeopleVaccinatedSecondDoseByPublishDate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose\",\n                  ];\n\n                case \"sevenDaysRateSecond\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"Second Dose (7-day average)\",\n                  ];\n\n                case \"sevenDaysRate\":\n                  return [\n                    new Intl.NumberFormat(\"en\").format(value),\n                    \"First Dose (7-day average)\",\n                  ];\n\n                default:\n                  return [null, null];\n              }\n            }}\n          />\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n            stackId=\"1\"\n            fill=\"#8884d8\"\n            stroke=\"#8884d8\"\n          >\n            {parsedData.map((entry, index) =>\n              moment(parsedData[index][\"date\"]).isoWeekday() === 6 ||\n              moment(parsedData[index][\"date\"]).isoWeekday() === 7 ? (\n                <Cell\n                  // stroke={\"#089c19\"}\n                  strokeWidth={4}\n                  strokeDasharray={[3, 3]}\n                />\n              ) : (\n                <Cell />\n              )\n            )}\n          </Bar>\n          <Bar\n            type=\"monotone\"\n            dataKey=\"newPeopleVaccinatedSecondDoseByPublishDate\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRate\"\n            stroke=\"#ff7300\"\n            strokeWidth={3}\n            dot={true}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"sevenDaysRateSecond\"\n            stroke=\"#81CA9C\"\n            strokeWidth={2}\n            dot={true}\n          />\n          {/* <Brush\n            dataKey=\"date\"\n            height={30}\n            stroke=\"#8884d8\"\n            startIndex={brushInits.start}\n          /> */}\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  } else return null;\n};\n\nexport default DailyRatesPlot;\n","import { useState, useEffect } from \"react\";\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n","import React from \"react\";\nimport { Card, Icon, Segment } from \"semantic-ui-react\";\n\nconst GenericContainer = ({\n  ChildComponent,\n  title,\n  description,\n  dateUpdated,\n  loading,\n}) => {\n  return (\n    <Card fluid as={Segment} loading={loading}>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description textAlign=\"center\">{ChildComponent}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Icon name=\"line graph\" />\n        Generated by @VaccineStatusUK &nbsp; &nbsp;\n        <Icon name=\"database\" />\n        <b>Data Source</b>: Public Health England (Updated {dateUpdated})\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default GenericContainer;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst VaccineStatisticsCompactCard = ({\n  title,\n  description,\n  mainFigure,\n  dayOnDay,\n  dayOnDayPercent,\n  weekOnWeek,\n  weekOnWeekPercent,\n  dataToPlot,\n  disableDeltaRounding,\n}) => {\n  const getDayOnDay = () => {\n    if (dayOnDay)\n      return (\n        <Fragment>\n          {dayOnDay > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Day: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(dayOnDay.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(dayOnDay))}</b>\n          )}\n          {dayOnDayPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(dayOnDayPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n          <br />\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getWeekOnWeek = () => {\n    if (weekOnWeek)\n      return (\n        <Fragment>\n          {weekOnWeek > 0 ? (\n            <Icon color=\"green\" name=\"arrow up\" />\n          ) : (\n            <Icon color=\"red\" name=\"arrow down\" />\n          )}\n          Δ Week: &nbsp;\n          {disableDeltaRounding ? (\n            <b>{Intl.NumberFormat(\"en\").format(weekOnWeek.toFixed(1))}</b>\n          ) : (\n            <b>{Intl.NumberFormat(\"en\").format(Math.round(weekOnWeek))}</b>\n          )}\n          {weekOnWeekPercent ? (\n            <Fragment>\n              &nbsp;(\n              {(weekOnWeekPercent * 100).toFixed(1)}\n              %)\n            </Fragment>\n          ) : null}\n        </Fragment>\n      );\n    else return null;\n  };\n\n  const getPlot = () => {\n    if (dataToPlot) {\n      dataToPlot = dataToPlot.filter(\n        (item) => item.data != null && item.data != 0\n      );\n\n      return (\n        <BarChart\n          width={250}\n          height={50}\n          data={dataToPlot}\n          margin={{\n            top: 10,\n            right: 0,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"date\" hide={true} />\n          <Tooltip\n            formatter={(value, name) => {\n              return [new Intl.NumberFormat(\"en\").format(value)];\n            }}\n          />\n          <Bar type=\"monotone\" dataKey=\"data\" fill=\"#8884d8\" />\n        </BarChart>\n      );\n    } else return null;\n  };\n\n  return (\n    <Card textAlign=\"left\" compact>\n      <Card.Content>\n        <Card.Header>{title}</Card.Header>\n        <Card.Meta>{description}</Card.Meta>\n        <Card.Description>\n          <Statistic size=\"tiny\">\n            <Statistic.Value>{mainFigure}</Statistic.Value>\n          </Statistic>\n        </Card.Description>\n\n        <Card.Description>\n          {getDayOnDay()}\n          {getWeekOnWeek()}\n          {getPlot()}\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default VaccineStatisticsCompactCard;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst StatisticsOverall = ({\n  parsedData,\n  showTweets,\n  dateUpdated,\n  statistics,\n}) => {\n  if (statistics)\n    return (\n      <Card.Group centered textAlign=\"left\">\n        <Card textAlign=\"left\" compact>\n          <Card.Content>\n            <Card.Header>16+ Population</Card.Header>\n            <Card.Meta>54.4M individuals</Card.Meta>\n\n            <Card.Description>\n              <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                First Doses\n              </Header>\n              <Progress\n                percent={(\n                  statistics.firstDosesStatistics.adultPopulationDone * 100\n                ).toFixed(0)}\n                progress\n                color=\"blue\"\n                size=\"small\"\n                style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n              />\n              <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n              <b>\n                {(\n                  statistics.firstDosesStatistics.adultPopulationDoneDayOnDay *\n                  100\n                ).toFixed(1)}\n              </b>\n              % &nbsp;\n              <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n              <b>\n                {(\n                  statistics.firstDosesStatistics\n                    .adultPopulationDoneWeekOnWeek * 100\n                ).toFixed(1)}\n              </b>\n              %\n            </Card.Description>\n            <Card.Description style={{ marginTop: \"5px\" }}>\n              <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                Second Doses\n              </Header>\n              <Progress\n                color=\"green\"\n                percent={(\n                  statistics.secondDosesStatistics.adultPopulationDone * 100\n                ).toFixed(0)}\n                progress\n                size=\"small\"\n                style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n              />\n              <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n              <b>\n                {(\n                  statistics.secondDosesStatistics.adultPopulationDoneDayOnDay *\n                  100\n                ).toFixed(1)}\n              </b>\n              % &nbsp;\n              <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n              <b>\n                {(\n                  statistics.secondDosesStatistics\n                    .adultPopulationDoneWeekOnWeek * 100\n                ).toFixed(1)}\n              </b>\n              %\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <Card textAlign=\"left\" compact>\n          <Card.Content>\n            <Card.Header>Priority Groups</Card.Header>\n            <Card.Meta>32M individuals</Card.Meta>\n\n            <Card.Description>\n              <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                First Doses\n              </Header>\n              <Progress\n                percent={(\n                  statistics.firstDosesStatistics.priorityGroupsDone * 100\n                ).toFixed(0)}\n                progress\n                size=\"small\"\n                color=\"blue\"\n                style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n              />\n              <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n              <b>\n                {(\n                  statistics.firstDosesStatistics.priorityGroupsDoneDayOnDay *\n                  100\n                ).toFixed(1)}\n              </b>\n              % &nbsp;\n              <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n              <b>\n                {(\n                  statistics.firstDosesStatistics.priorityGroupsDoneWeekOnWeek *\n                  100\n                ).toFixed(1)}\n              </b>\n              %\n            </Card.Description>\n            <Card.Description style={{ marginTop: \"5px\" }}>\n              <Header as=\"h5\" style={{ marginBottom: \"2px\" }}>\n                Second Doses\n              </Header>\n              <Progress\n                color=\"green\"\n                percent={(\n                  statistics.secondDosesStatistics.priorityGroupsDone * 100\n                ).toFixed(0)}\n                progress\n                size=\"small\"\n                style={{ marginBottom: \"5px\", marginTop: \"3px\" }}\n              />\n              <Icon color=\"green\" name=\"arrow up\" />Δ Day: &nbsp;\n              <b>\n                {(\n                  statistics.secondDosesStatistics.priorityGroupsDoneDayOnDay *\n                  100\n                ).toFixed(1)}\n              </b>\n              % &nbsp;\n              <Icon color=\"green\" name=\"arrow up\" />Δ Week: &nbsp;\n              <b>\n                {(\n                  statistics.secondDosesStatistics\n                    .priorityGroupsDoneWeekOnWeek * 100\n                ).toFixed(1)}\n              </b>\n              %\n            </Card.Description>\n          </Card.Content>\n        </Card>\n        <VaccineStatisticsCompactCard\n          title=\"Completed Courses\"\n          description=\"Fraction of completed courses\"\n          mainFigure={\n            (statistics.allDosesStatistics.completedCourses * 100).toFixed(1) +\n            \"%\"\n          }\n          dayOnDay={\n            statistics.allDosesStatistics.completedCoursesDayOnDay * 100\n          }\n          weekOnWeek={\n            statistics.allDosesStatistics.completedCoursesWeekOnWeek * 100\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data:\n                item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n                item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n            };\n          })}\n          disableDeltaRounding={true}\n        />\n      </Card.Group>\n    );\n  else return null;\n};\n\nexport default StatisticsOverall;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst StatisticsFirstDoses = ({\n  parsedData,\n  showTweets,\n  dateUpdated,\n  statistics,\n}) => {\n  if (statistics)\n    return (\n      <Card.Group centered textAlign=\"left\">\n        <VaccineStatisticsCompactCard\n          title=\"Cumulative\"\n          description=\"1st Doses so far\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.firstDosesStatistics.total\n          )}\n          dayOnDay={statistics.firstDosesStatistics.totalDayOnDay}\n          dayOnDayPercent={statistics.firstDosesStatistics.totalDayOnDayPercent}\n          weekOnWeek={statistics.firstDosesStatistics.totalWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.firstDosesStatistics.totalWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"Daily Rate\"\n          description=\"New 1st Doses\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.firstDosesStatistics.new\n          )}\n          dayOnDay={statistics.firstDosesStatistics.newDayOnDay}\n          dayOnDayPercent={statistics.firstDosesStatistics.newDayOnDayPercent}\n          weekOnWeek={statistics.firstDosesStatistics.newWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.firstDosesStatistics.newWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"7-Day Average\"\n          description=\"7-Day Average for 1st Doses\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            Math.round(statistics.firstDosesStatistics.sevenDaysRate)\n          )}\n          dayOnDay={statistics.firstDosesStatistics.sevenDaysRateDayOnDay}\n          dayOnDayPercent={\n            statistics.firstDosesStatistics.sevenDaysRateDayOnDayPercent\n          }\n          weekOnWeek={statistics.firstDosesStatistics.sevenDaysRateWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.firstDosesStatistics.sevenDaysRateWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"sevenDaysRate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n      </Card.Group>\n    );\n  else return null;\n};\n\nexport default StatisticsFirstDoses;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst StatisticsSecondDoses = ({\n  parsedData,\n  showTweets,\n  dateUpdated,\n  statistics,\n}) => {\n  if (statistics)\n    return (\n      <Card.Group centered textAlign=\"left\">\n        <VaccineStatisticsCompactCard\n          title=\"Cumulative\"\n          description=\"2nd Doses so far\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.secondDosesStatistics.total\n          )}\n          dayOnDay={statistics.secondDosesStatistics.totalDayOnDay}\n          dayOnDayPercent={\n            statistics.secondDosesStatistics.totalDayOnDayPercent\n          }\n          weekOnWeek={statistics.secondDosesStatistics.totalWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.secondDosesStatistics.totalWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"Daily Rate\"\n          description=\"New 2nd Doses\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.secondDosesStatistics.new\n          )}\n          dayOnDay={statistics.secondDosesStatistics.newDayOnDay}\n          dayOnDayPercent={statistics.secondDosesStatistics.newDayOnDayPercent}\n          weekOnWeek={statistics.secondDosesStatistics.newWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.secondDosesStatistics.newWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"7-Day Average\"\n          description=\"7-Day Average for 2nd Doses\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            Math.round(statistics.secondDosesStatistics.sevenDaysRate)\n          )}\n          dayOnDay={statistics.secondDosesStatistics.sevenDaysRateDayOnDay}\n          dayOnDayPercent={\n            statistics.secondDosesStatistics.sevenDaysRateDayOnDayPercent\n          }\n          weekOnWeek={statistics.secondDosesStatistics.sevenDaysRateWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.secondDosesStatistics.sevenDaysRateWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"sevenDaysRateSecond\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n      </Card.Group>\n    );\n  else return null;\n};\n\nexport default StatisticsSecondDoses;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Statistic,\n  Segment,\n  Grid,\n  Header,\n  Icon,\n  Progress,\n  Card,\n} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nimport VaccineStatisticsCompactCard from \"./VaccineStatisticsCompactCard\";\n\nconst StatisticsCombinedDoses = ({\n  parsedData,\n  showTweets,\n  dateUpdated,\n  statistics,\n}) => {\n  if (statistics)\n    return (\n      <Card.Group centered textAlign=\"left\">\n        <VaccineStatisticsCompactCard\n          title=\"Cumulative\"\n          description=\"Inoculations so far\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.allDosesStatistics.total\n          )}\n          dayOnDay={statistics.allDosesStatistics.totalDayOnDay}\n          dayOnDayPercent={statistics.allDosesStatistics.totalDayOnDayPercent}\n          weekOnWeek={statistics.allDosesStatistics.totalWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.allDosesStatistics.totalWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data:\n                item[\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n                item[\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"Daily Rate\"\n          description=\"Number of new inoculations\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            statistics.allDosesStatistics.new\n          )}\n          dayOnDay={statistics.allDosesStatistics.newDayOnDay}\n          dayOnDayPercent={statistics.allDosesStatistics.newDayOnDayPercent}\n          weekOnWeek={statistics.allDosesStatistics.newWeekOnWeek}\n          weekOnWeekPercent={statistics.allDosesStatistics.newWeekOnWeekPercent}\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data:\n                item[\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n                item[\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n        <VaccineStatisticsCompactCard\n          title=\"7-Day Average\"\n          description=\"7-Day Average for inoculations\"\n          mainFigure={Intl.NumberFormat(\"en\").format(\n            Math.round(statistics.allDosesStatistics.sevenDaysRate)\n          )}\n          dayOnDay={statistics.allDosesStatistics.sevenDaysRateDayOnDay}\n          dayOnDayPercent={\n            statistics.allDosesStatistics.sevenDaysRateDayOnDayPercent\n          }\n          weekOnWeek={statistics.allDosesStatistics.sevenDaysRateWeekOnWeek}\n          weekOnWeekPercent={\n            statistics.allDosesStatistics.sevenDaysRateWeekOnWeekPercent\n          }\n          dataToPlot={parsedData.map((item) => {\n            return {\n              data: item[\"sevenDaysRate\"] + item[\"sevenDaysRateSecond\"],\n              date: item[\"date\"],\n            };\n          })}\n        />\n      </Card.Group>\n    );\n  else return null;\n};\n\nexport default StatisticsCombinedDoses;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport moment from \"moment\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  CartesianGrid,\n  ReferenceLine,\n  Label,\n  ComposedChart,\n  Legend,\n  Line,\n  Text,\n  Tooltip,\n  LineChart,\n  Bar,\n  YAxis,\n  BarChart,\n  ResponsiveContainer,\n  ReferenceArea,\n} from \"recharts\";\nimport { Grid, Segment, Header } from \"semantic-ui-react\";\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\n\nimport _, { forEach } from \"lodash\";\n\nconst CustomizedAxisTick = ({ x, y, stroke, payload }) => {\n  return (\n    // <g transform={`translate(${x},${y})`}>\n    <text\n      x={x}\n      y={y}\n      // x={0}\n      // y={0}\n      dx={-30}\n      dy={16}\n      // textAnchor=\"end\"\n      fill={\"#666\"}\n      // transform=\"rotate(-35)\"\n    >\n      {moment(payload.value).format(\"DD MMM YY\")}\n    </text>\n    // </g>\n  );\n};\n\nconst SecondDoseDebt = ({\n  parsedData,\n  debtData,\n  weeklyDebtData,\n  rateForPredictions,\n}) => {\n  const [indexAllDone, setIndexAllDone] = useState(null);\n  const [indexAllDoneWeekly, setIndexAllDoneWeekly] = useState(null);\n\n  useEffect(() => {\n    if (debtData) {\n      const indexAllDone = debtData.findIndex(\n        (item) =>\n          item.cumFirstDoses >= 53000000 && item.cumSecondDoses >= 53000000\n      );\n      setIndexAllDone(indexAllDone);\n\n      const indexAllDoneWeekly = weeklyDebtData.findIndex(\n        (item) =>\n          item.cumFirstDoses >= 53000000 && item.cumSecondDoses >= 53000000\n      );\n      setIndexAllDoneWeekly(indexAllDoneWeekly);\n    }\n  }, [parsedData, debtData, weeklyDebtData, rateForPredictions]);\n\n  if (debtData && indexAllDone) {\n    const dateStartPredicted = debtData.find((datum) => datum.predicted).date;\n    const dateStartPredictedWeekly = weeklyDebtData.find(\n      (datum) => datum.predicted\n    ).weekFirstDay;\n    const indextStartPredictedWeekly = weeklyDebtData.findIndex(\n      (datum) => datum.predicted\n    );\n\n    // console.log(dateStartPredictedWeekly);\n\n    return (\n      <Fragment>\n        <Header as=\"h4\">\n          Cumulative Doses Predictions\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            // data={debtData.slice(0, indexAllDone + 5)}\n            data={debtData.slice(0, indexAllDone + 5)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              domain={[0, 60000000]}\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <ReferenceLine\n              stroke=\"blue\"\n              y=\"53000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomLeft\",\n                value: \"All Adults\",\n                fontSize: 16,\n              }}\n            />\n            <ReferenceLine\n              stroke=\"red\"\n              y=\"32000000\"\n              strokeDasharray=\"3 3\"\n              label={{\n                position: \"insideBottomLeft\",\n                value: \"Priority Groups \",\n                fontSize: 16,\n              }}\n            />\n            <ReferenceArea\n              x1={dateStartPredicted}\n              x2={debtData[indexAllDone + 4].date}\n              // y1={0}\n              // y2={45000000}\n              strokeWidth={5}\n              label={{\n                position: \"insideTopLeft\",\n                value: \"🔮 Predicted ➡️\",\n                fontSize: 16,\n              }}\n            />\n            <Line\n              dataKey=\"cumFirstDoses\"\n              dot={false}\n              stroke=\"#8884d8\"\n              strokeWidth={3}\n            />\n            <Line\n              dataKey=\"cumSecondDoses\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n        <Header as=\"h4\">\n          Weekly Doses Prediction\n          <Header.Subheader>\n            Predictions for rate of{\" \"}\n            <b>\n              {Intl.NumberFormat(\"en\").format(Math.round(rateForPredictions))}\n            </b>{\" \"}\n            combined doses a day\n          </Header.Subheader>\n        </Header>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <BarChart\n            data={weeklyDebtData.slice(0, indexAllDoneWeekly + 1)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 40,\n              bottom: 30,\n            }}\n          >\n            {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\n            {/* <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"firstDosesDone\":\n                    return \"First Dose\";\n\n                  case \"secondDosesDone\":\n                    return \"Second Dose\";\n                }\n              }}\n            /> */}\n            <XAxis\n              dataKey=\"weekFirstDay\"\n              tick={<CustomizedAxisTick />}\n              // domain={\n              //   (weeklyDebtData[0].date,\n              //   weeklyDebtData[weeklyDebtData.length - 1].date)\n              // }\n              // label={{ dy: 30, value: \"Week\" }}\n              type=\"category\"\n              // domain={[\"auto\", \"auto\"]}\n            />\n            <YAxis\n              label={\n                <Text x={0} y={0} dx={30} dy={245} offset={0} angle={-90}>\n                  Average Daily Vaccinations\n                </Text>\n              }\n              tickFormatter={(value) =>\n                new Intl.NumberFormat(\"en\").format(value)\n              }\n            />\n            <ReferenceArea\n              // x1={dateStartPredictedWeekly}\n              // x2={weeklyDebtData[indexAllDoneWeekly - 1].weekFirstDay}\n              // x1={\"2021-04-11\"}\n              // x2={\"2021-05-16\"}\n              x1={indextStartPredictedWeekly}\n              x2={indexAllDoneWeekly}\n              // y1={0}\n              // y2={45000000}\n              strokeWidth={5}\n              label={{\n                position: \"insideTopLeft\",\n                value: \"🔮 Predicted ➡️\",\n                fontSize: 16,\n              }}\n            />\n            <Bar dataKey=\"firstDosesDone\" stackId=\"a\" fill=\"#8884d8\" />\n            <Bar dataKey=\"secondDosesDone\" stackId=\"a\" fill=\"#82ca9d\" />\n            <Tooltip />\n          </BarChart>\n        </ResponsiveContainer>\n\n        {/* <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            data={debtData.slice(0, parsedData.length)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <Line\n              dataKey=\"secondDosesDue\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n\n          </LineChart>\n        </ResponsiveContainer>\n        <ResponsiveContainer width=\"100%\" height={375}>\n          <LineChart\n            data={parsedData.slice(7, parsedData.length)}\n            margin={{\n              top: 10,\n              right: 30,\n              left: 25,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Legend\n              verticalAlign=\"top\"\n              height={36}\n              formatter={(value, entry, index) => {\n                switch (value) {\n                  case \"cumFirstDoses\":\n                    return \"First Dose\";\n\n                  case \"cumSecondDoses\":\n                    return \"Second Dose\";\n                }\n              }}\n            />\n            <XAxis\n              dataKey=\"date\"\n              tick={<CustomizedAxisTick />}\n              domain={[\n                parsedData[0].date,\n                parsedData[parsedData.length - 1].date,\n              ]}\n              label={{ dy: 30, value: \"Reporting Date\" }}\n            />\n            <YAxis\n              type=\"number\"\n              tickFormatter={(value) => `${Math.round(value / 1e6)}M`}\n              label={\n                <Text x={0} y={0} dx={30} dy={270} offset={0} angle={-90}>\n                  Individuals Vaccinated\n                </Text>\n              }\n            />\n            <Tooltip />\n\n            <Line\n              dataKey=\"newPeopleVaccinatedFirstDoseByPublishDate\"\n              dot={false}\n              stroke=\"#82ca9d\"\n              strokeWidth={3}\n            />\n \n          </LineChart>\n        </ResponsiveContainer> */}\n      </Fragment>\n    );\n  } else return null;\n};\n\nexport default SecondDoseDebt;\n","export default __webpack_public_path__ + \"static/media/logo.79d7eeea.png\";","import _, { forEach } from \"lodash\";\nimport moment from \"moment\";\nmoment.locale(\"en-gb\");\n\nexport const computeAverageRate = (data, days, fromKey, toKey) => {\n  data.forEach((datum, index) => {\n    if (index >= 6) {\n      data[index][toKey] = _.mean(\n        data.slice(index - (days - 1), index + 1).map((a) => a[fromKey])\n      );\n    } else data[index][toKey] = null;\n  });\n\n  return data;\n};\n\nexport const predictDebtIntoFuture = (\n  data,\n  allDosesRate,\n  firstDosesColumn,\n  maxFirstDoses,\n  initialCumFirstDoses,\n  initialCumSecondDoses\n) => {\n  let carryOver = 0;\n  let secondDosesDue = 0;\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n\n  const debtData_ = data.map((datum, index) => {\n    // Debt from first doses (from 12 weeks prior) and carry over from previous day added to total number of second doses due\n    secondDosesDue += datum[firstDosesColumn] + carryOver;\n\n    let secondDosesDueRecord = secondDosesDue;\n    let carryOverRecord = carryOver;\n\n    let secondDosesDone = 0;\n\n    if (\n      index > 0 &&\n      cumFirstDoses >= maxFirstDoses &&\n      cumSecondDoses <= maxFirstDoses\n    ) {\n      secondDosesDone = allDosesRate;\n    } else {\n      if (secondDosesDue >= allDosesRate) {\n        secondDosesDone = allDosesRate;\n        carryOver = secondDosesDue - allDosesRate;\n      } else {\n        secondDosesDone = secondDosesDue;\n        carryOver = 0;\n      }\n    }\n\n    let spareCapacity = allDosesRate - secondDosesDone;\n    let firstDosesDone = 0;\n\n    if (spareCapacity > 0 && cumFirstDoses <= maxFirstDoses)\n      firstDosesDone = spareCapacity;\n\n    secondDosesDue -= secondDosesDue;\n\n    if (index == 0) {\n      if (initialCumFirstDoses && initialCumSecondDoses) {\n        cumFirstDoses = initialCumFirstDoses;\n        cumSecondDoses = initialCumSecondDoses;\n      } else {\n        cumFirstDoses = firstDosesDone;\n        cumSecondDoses = secondDosesDone;\n      }\n    } else {\n      cumFirstDoses += firstDosesDone;\n      cumSecondDoses += secondDosesDone;\n    }\n\n    return {\n      date: moment(datum[\"date\"]).add(12, \"weeks\").format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: carryOverRecord,\n      secondDosesNewFromDay: datum[firstDosesColumn],\n      spareCapacity: spareCapacity,\n      secondDosesDue: secondDosesDueRecord,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    };\n  });\n\n  return debtData_;\n};\n\nexport const fillDataWithConstantRate = (\n  initialData,\n  daysToFill,\n  rate,\n  cumFirstDosesColumn,\n  cumSecondDosesColumn,\n  maxFirstDoses\n) => {\n  let fillData = [];\n\n  let cumFirstDoses = 0;\n  let cumSecondDoses = 0;\n  let firstDosesDone = 0;\n  let secondDosesDone = 0;\n\n  for (let i = 1; i < daysToFill; i++) {\n    let maxFirstDosesReached = false;\n    let maxSecondDosesReached = false;\n\n    if (i == 1) {\n      if (\n        initialData[initialData.length - 1][cumFirstDosesColumn] >=\n        maxFirstDoses\n      )\n        maxFirstDosesReached = true;\n      if (\n        initialData[initialData.length - 1][cumSecondDosesColumn] >=\n        maxFirstDoses\n      )\n        maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn] + rate;\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn] + rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses =\n          initialData[initialData.length - 1][cumFirstDosesColumn];\n        cumSecondDoses =\n          initialData[initialData.length - 1][cumSecondDosesColumn];\n      } else {\n        console.log(\"Should never reach this\");\n      }\n    } else {\n      if (cumFirstDoses >= maxFirstDoses) maxFirstDosesReached = true;\n      if (cumSecondDoses >= maxFirstDoses) maxSecondDosesReached = true;\n\n      if (!maxFirstDosesReached && !maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (!maxFirstDosesReached && maxSecondDosesReached) {\n        cumFirstDoses += rate;\n        firstDosesDone = rate;\n        secondDosesDone = 0;\n      } else if (maxFirstDosesReached && !maxSecondDosesReached) {\n        cumSecondDoses += rate;\n        firstDosesDone = 0;\n        secondDosesDone = rate;\n      } else if (maxFirstDosesReached && maxSecondDosesReached) {\n        // do nothing\n      } else console.log(\"Should never reach this\");\n    }\n\n    fillData.push({\n      date: moment(initialData[initialData.length - 1].date)\n        .add(i, \"day\")\n        .format(\"YYYY-MM-DD\"),\n      secondDosesDone: secondDosesDone,\n      firstDosesDone: firstDosesDone,\n      secondDosesCarryOverFromPreviousDay: 0,\n      secondDosesNewFromDay: 0,\n      spareCapacity: rate,\n      secondDosesDue: 0,\n      cumFirstDoses: cumFirstDoses,\n      cumSecondDoses: cumSecondDoses,\n    });\n  }\n\n  return fillData;\n};\n\nexport const addWeekField = (data) => {\n  return data.map((datum) => {\n    datum.week = moment(datum.date).week();\n    return datum;\n  });\n};\n\nexport const convertToWeeklyData = (data) => {\n  const fieldsToAverage = [\n    \"cumFirstDoses\",\n    \"cumSecondDoses\",\n    \"firstDosesDone\",\n    \"secondDosesDone\",\n    \"spareCapacity\",\n  ];\n\n  const weeklyData = [];\n\n  const years = _.uniq(_.map(data, \"year\"));\n\n  years.forEach((year) => {\n    const filteredByYear = data.filter((item) => item.year == year);\n    const weeks = _.uniq(_.map(filteredByYear, \"week\"));\n\n    weeks.forEach((week) => {\n      const filteredData = data.filter(\n        (item) => item.week === week && item.year == year\n      );\n\n      let weekData = {};\n\n      fieldsToAverage.forEach((field) => {\n        weekData[field] = _.meanBy(filteredData, field);\n      });\n\n      const predicted = _.some(filteredData, { predicted: true });\n\n      weekData[\"week\"] = week;\n\n      weekData.predicted = predicted;\n\n      weekData[\"weekFirstDay\"] = moment({ y: year }) // get first day of the given year\n        .week(week) // get the first week according locale\n        .startOf(\"week\") // get the first day of the week according locale\n        .format(\"YYYY-MM-DD\");\n\n      weeklyData.push(weekData);\n    });\n  });\n\n  return weeklyData;\n};\n\nexport const computeStatistics = (parsedData) => {\n  const latestIndex = parsedData.length - 1;\n\n  let statistics = {};\n\n  statistics.allDosesStatistics = {\n    total:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    totalDayOnDayPercent:\n      (parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 1][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    totalWeekOnWeekPercent:\n      (parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 7][\n            \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    new:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDayPercent:\n      (parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 1][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 1][\n        \"newPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      (parsedData[latestIndex - 7][\n        \"newPeopleVaccinatedFirstDoseByPublishDate\"\n      ] +\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ]),\n    newWeekOnWeekPercent:\n      (parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] +\n        parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"]) /\n        (parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] +\n          parsedData[latestIndex - 7][\n            \"newPeopleVaccinatedSecondDoseByPublishDate\"\n          ]) -\n      1,\n    completedCourses:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n    completedCoursesWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ],\n    completedCoursesDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ],\n    sevenDaysRate:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n        parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]),\n\n    sevenDaysRateDayOnDayPercent:\n      (parsedData[latestIndex][\"sevenDaysRate\"] +\n        parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n        (parsedData[latestIndex - 1][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 1][\"sevenDaysRateSecond\"]) -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRate\"] +\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n        parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]),\n\n    sevenDaysRateWeekOnWeekPercent:\n      (parsedData[latestIndex][\"sevenDaysRate\"] +\n        parsedData[latestIndex][\"sevenDaysRateSecond\"]) /\n        (parsedData[latestIndex - 7][\"sevenDaysRate\"] +\n          parsedData[latestIndex - 7][\"sevenDaysRateSecond\"]) -\n      1,\n  };\n\n  statistics.firstDosesStatistics = {\n    total: parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n\n    totalDayOnDayPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"],\n\n    totalWeekOnWeekPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    new: parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newDayOnDayPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"newPeopleVaccinatedFirstDoseByPublishDate\"],\n    newWeekOnWeekPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedFirstDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedFirstDoseByPublishDate\"\n        ] -\n      1,\n    sevenDaysRate: parsedData[latestIndex][\"sevenDaysRate\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRate\"] -\n      parsedData[latestIndex - 1][\"sevenDaysRate\"],\n\n    sevenDaysRateDayOnDayPercent:\n      parsedData[latestIndex][\"sevenDaysRate\"] /\n        parsedData[latestIndex - 1][\"sevenDaysRate\"] -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRate\"] -\n      parsedData[latestIndex - 7][\"sevenDaysRate\"],\n\n    sevenDaysRateWeekOnWeekPercent:\n      parsedData[latestIndex][\"sevenDaysRate\"] /\n        parsedData[latestIndex - 7][\"sevenDaysRate\"] -\n      1,\n    adultPopulationDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n      54353665,\n    adultPopulationDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665,\n    adultPopulationDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        54353665,\n    priorityGroupsDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n      32000000,\n    priorityGroupsDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000,\n    priorityGroupsDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedFirstDoseByPublishDate\"] /\n        32000000,\n  };\n\n  statistics.secondDosesStatistics = {\n    total:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n    totalDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n\n    totalDayOnDayPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    totalWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"cumPeopleVaccinatedSecondDoseByPublishDate\"],\n\n    totalWeekOnWeekPercent:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    new: parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDay:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 1][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newDayOnDayPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 1][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    newWeekOnWeek:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] -\n      parsedData[latestIndex - 7][\"newPeopleVaccinatedSecondDoseByPublishDate\"],\n    newWeekOnWeekPercent:\n      parsedData[latestIndex][\"newPeopleVaccinatedSecondDoseByPublishDate\"] /\n        parsedData[latestIndex - 7][\n          \"newPeopleVaccinatedSecondDoseByPublishDate\"\n        ] -\n      1,\n    sevenDaysRate: parsedData[latestIndex][\"sevenDaysRateSecond\"],\n    sevenDaysRateDayOnDay:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      parsedData[latestIndex - 1][\"sevenDaysRateSecond\"],\n\n    sevenDaysRateDayOnDayPercent:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n        parsedData[latestIndex - 1][\"sevenDaysRateSecond\"] -\n      1,\n    sevenDaysRateWeekOnWeek:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] -\n      parsedData[latestIndex - 7][\"sevenDaysRateSecond\"],\n\n    sevenDaysRateWeekOnWeekPercent:\n      parsedData[latestIndex][\"sevenDaysRateSecond\"] /\n        parsedData[latestIndex - 7][\"sevenDaysRateSecond\"] -\n      1,\n    adultPopulationDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      54353665,\n    adultPopulationDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        54353665,\n    adultPopulationDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        54353665 -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        54353665,\n    priorityGroupsDone:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n      32000000,\n    priorityGroupsDoneDayOnDay:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 1][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        32000000,\n    priorityGroupsDoneWeekOnWeek:\n      parsedData[latestIndex][\"cumPeopleVaccinatedSecondDoseByPublishDate\"] /\n        32000000 -\n      parsedData[latestIndex - 7][\n        \"cumPeopleVaccinatedSecondDoseByPublishDate\"\n      ] /\n        32000000,\n  };\n\n  return statistics;\n};\n","import React from \"react\";\n\nconst PredictedTimeline = ({ parsedData, debtData }) => {\n  return null;\n};\n\nexport default PredictedTimeline;\n","import React, { Fragment } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n  Dropdown,\n} from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nexport const generateTweetHistoricalData = (\n  parsedData,\n  statistics,\n  updateDate\n) => {\n  return (\n    <Fragment>\n      <Segment textAlign=\"left\">\n        {moment(updateDate).format(\"DD MMMM\")} UK Vaccine Progress Tracker\n        <br />\n        <br />\n        1️⃣ 1st Dose (16+)\n        <br />\n        {\"▓\".repeat(\n          Math.ceil(statistics.firstDosesStatistics.adultPopulationDone * 20)\n        )}\n        {\"░\".repeat(\n          20 -\n            Math.ceil(statistics.firstDosesStatistics.adultPopulationDone * 20)\n        )}{\" \"}\n        {(statistics.firstDosesStatistics.adultPopulationDone * 100).toFixed(0)}\n        %\n        <br />\n        <br />\n        2️⃣ 2nd Dose (16+)\n        <br />\n        {\"▓\".repeat(\n          Math.ceil(statistics.secondDosesStatistics.adultPopulationDone * 20)\n        )}\n        {\"░\".repeat(\n          20 -\n            Math.ceil(statistics.secondDosesStatistics.adultPopulationDone * 20)\n        )}{\" \"}\n        {(statistics.secondDosesStatistics.adultPopulationDone * 100).toFixed(\n          0\n        )}\n        %\n        <br />\n        <br />\n        #vaccine #vaccination #VaccinesWork\n      </Segment>\n      <Segment textAlign=\"left\">\n        1️⃣+2️⃣ All Doses Update on {moment(updateDate).format(\"DD MMMM\")} 📢\n        <br />\n        <br />\n        {Intl.NumberFormat(\"en\").format(statistics.allDosesStatistics.new)} new\n        doses administered yesterday (\n        {moment(updateDate).subtract(1, \"days\").format(\"DD MMMM\")}) across the\n        UK🇬🇧\n        <br />\n        <br />\n        Total Doses:{\" \"}\n        {Intl.NumberFormat(\"en\").format(statistics.allDosesStatistics.total)}\n        <br />\n        <br />\n        {statistics.allDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n        {Math.abs(\n          Math.round(statistics.allDosesStatistics.newDayOnDayPercent * 100)\n        )}\n        % day on day rate <br />\n        {statistics.allDosesStatistics.newWeekOnWeekPercent > 0 ? \"📈+\" : \"📉-\"}\n        {Math.abs(\n          Math.round(statistics.allDosesStatistics.newWeekOnWeekPercent * 100)\n        )}\n        % week on week rate <br />\n        {statistics.allDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"📈\"\n          : \"📉\"}\n        7-day average of{\" \"}\n        {Intl.NumberFormat(\"en\").format(\n          Math.round(statistics.allDosesStatistics.sevenDaysRate)\n        )}{\" \"}\n        (\n        {statistics.allDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"+\"\n          : \"-\"}\n        {Math.abs(\n          Math.round(\n            statistics.allDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n          )\n        )}\n        % week on week)\n        <br />\n        <br />\n        #vaccine #COVID19\n      </Segment>\n      <Segment textAlign=\"left\">\n        1️⃣ First Doses Update on {moment(updateDate).format(\"DD MMMM\")} 📢\n        <br />\n        <br />\n        {Intl.NumberFormat(\"en\").format(\n          statistics.firstDosesStatistics.new\n        )}{\" \"}\n        new doses administered yesterday (\n        {moment(updateDate).subtract(1, \"days\").format(\"DD MMMM\")}) across the\n        UK🇬🇧\n        <br />\n        <br />\n        Total 1st Doses:{\" \"}\n        {Intl.NumberFormat(\"en\").format(statistics.firstDosesStatistics.total)}\n        <br />\n        <br />\n        {statistics.firstDosesStatistics.newDayOnDayPercent > 0 ? \"📈+\" : \"📉-\"}\n        {Math.abs(\n          Math.round(statistics.firstDosesStatistics.newDayOnDayPercent * 100)\n        )}\n        % day on day rate <br />\n        {statistics.firstDosesStatistics.newWeekOnWeekPercent > 0\n          ? \"📈+\"\n          : \"📉-\"}\n        {Math.abs(\n          Math.round(statistics.firstDosesStatistics.newWeekOnWeekPercent * 100)\n        )}\n        % week on week rate <br />\n        {statistics.firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"📈\"\n          : \"📉\"}\n        7-day average of{\" \"}\n        {Intl.NumberFormat(\"en\").format(\n          Math.round(statistics.firstDosesStatistics.sevenDaysRate)\n        )}{\" \"}\n        (\n        {statistics.firstDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"+\"\n          : \"-\"}\n        {Math.abs(\n          Math.round(\n            statistics.firstDosesStatistics.sevenDaysRateWeekOnWeekPercent * 100\n          )\n        )}\n        % week on week)\n        <br />\n        <br />\n        #vaccine #COVID19\n      </Segment>\n      <Segment textAlign=\"left\">\n        2️⃣ Second Doses Update on {moment(updateDate).format(\"DD MMMM\")} 📢\n        <br />\n        <br />\n        {Intl.NumberFormat(\"en\").format(\n          statistics.secondDosesStatistics.new\n        )}{\" \"}\n        new doses administered yesterday (\n        {moment(updateDate).subtract(1, \"days\").format(\"DD MMMM\")}) across the\n        UK🇬🇧\n        <br />\n        <br />\n        Total 2nd Doses:{\" \"}\n        {Intl.NumberFormat(\"en\").format(statistics.secondDosesStatistics.total)}\n        <br />\n        <br />\n        {statistics.secondDosesStatistics.newDayOnDayPercent > 0\n          ? \"📈+\"\n          : \"📉-\"}\n        {Math.abs(\n          Math.round(statistics.secondDosesStatistics.newDayOnDayPercent * 100)\n        )}\n        % day on day rate <br />\n        {statistics.secondDosesStatistics.newWeekOnWeekPercent > 0\n          ? \"📈+\"\n          : \"📉-\"}\n        {Math.abs(\n          Math.round(\n            statistics.secondDosesStatistics.newWeekOnWeekPercent * 100\n          )\n        )}\n        % week on week rate <br />\n        {statistics.secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"📈\"\n          : \"📉\"}\n        7-day average of{\" \"}\n        {Intl.NumberFormat(\"en\").format(\n          Math.round(statistics.secondDosesStatistics.sevenDaysRate)\n        )}{\" \"}\n        (\n        {statistics.secondDosesStatistics.sevenDaysRateWeekOnWeekPercent > 0\n          ? \"+\"\n          : \"-\"}\n        {Math.abs(\n          Math.round(\n            statistics.secondDosesStatistics.sevenDaysRateWeekOnWeekPercent *\n              100\n          )\n        )}\n        % week on week)\n        <br />\n        <br />\n        #vaccine #COVID19\n      </Segment>\n    </Fragment>\n  );\n};\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport {\n  Container,\n  Header,\n  Image,\n  Segment,\n  Icon,\n  List,\n  Message,\n  Form,\n  Input,\n  Dropdown,\n} from \"semantic-ui-react\";\nimport VaccinationProgressPlot from \"./components/VaccinationProgressPlot\";\nimport DailyRatesPlot from \"./components/DailyRatesPlot\";\nimport GenericContainer from \"./components/GenericContainer\";\nimport ScoreCardGroupWithDebt from \"./components/ScoreCardGroupWithDebt\";\nimport VaccineStatisticsCompact from \"./components/Statistics/VaccineStatisticsCompact\";\nimport StatisticsOverall from \"./components/Statistics/StatisticsOverall\";\nimport StatisticsFirstDoses from \"./components/Statistics/StatisticsFirstDoses\";\nimport StatisticsSecondDoses from \"./components/Statistics/StatisticsSecondDoses\";\n\nimport StatisticsCombinedDoses from \"./components/Statistics/StatisticsCombinedDoses\";\n\nimport SecondDoseDebt from \"./components/SecondDoseDebt\";\n\nimport logo from \"./assets/logo.png\";\nimport vaccination_json from \"./data/vaccination-data.json\";\nimport moment from \"moment\";\nimport {\n  computeAverageRate,\n  convertToWeeklyData,\n  computeStatistics,\n} from \"./utils/compute_utils\";\nimport PredictedTimeline from \"./components/PredictedTimeline\";\nimport { useLocation } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport { generateTweetHistoricalData } from \"./utils/generate_tweets\";\n\nfunction App() {\n  const [showTweets, setShowTweets] = useState(false);\n  const [parsedData, setParsedData] = useState(null);\n  const [updateDate, setUpdateDate] = useState(null);\n  const [debtData, setDebtData] = useState(null);\n  const [weeklyDebtData, setWeeklyDebtData] = useState(null);\n  const [rateForPredictions, setRateForPredictions] = useState(null);\n  const [currentRateForPredictions, setCurrentRateForPredictions] =\n    useState(null);\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState(null);\n\n  let location = useLocation();\n\n  const options = [\n    { key: 1, text: \"Current 7-day average\", value: currentRateForPredictions },\n    {\n      key: 2,\n      text: \"Twice Current 7-day average\",\n      value: currentRateForPredictions * 2,\n    },\n    {\n      key: 3,\n      text: \"Half-current 7-day average\",\n      value: currentRateForPredictions / 2,\n    },\n  ];\n\n  useEffect(() => {\n    let showTweetsParam = new URLSearchParams(location.search).get(\n      \"showTweets\"\n    );\n\n    if (showTweetsParam) setShowTweets(true);\n  }, [location]);\n\n  // Load, convert, and sort data\n  useEffect(() => {\n    let rawData = vaccination_json.data;\n\n    // Sort by date (newer first)\n    rawData.sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n\n    let parsedData = computeAverageRate(\n      rawData,\n      7,\n      \"newPeopleVaccinatedFirstDoseByPublishDate\",\n      \"sevenDaysRate\"\n    );\n    parsedData = computeAverageRate(\n      parsedData,\n      7,\n      \"newPeopleVaccinatedSecondDoseByPublishDate\",\n      \"sevenDaysRateSecond\"\n    );\n\n    setParsedData(parsedData);\n\n    // Compute update date (assumed to be latest date in data + 1 day)\n    const latestDate = parsedData[parsedData.length - 1].date;\n    setUpdateDate(moment(latestDate).add(1, \"d\").format(\"DD MMMM YYYY\"));\n  }, []);\n\n  useEffect(() => {\n    if (parsedData) {\n      setLoading(true);\n      const RATE =\n        parsedData[parsedData.length - 1].sevenDaysRate +\n        parsedData[parsedData.length - 1].sevenDaysRateSecond;\n      const debtData_ = {};\n\n      const startDate = moment(parsedData[parsedData.length - 1].date).add(\n        1,\n        \"days\"\n      );\n\n      // Create structure to hold the debt data\n      for (let i = 0; i < 500; i++) {\n        debtData_[startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\")] = {\n          date: startDate.clone().add(i, \"days\").format(\"YYYY-MM-DD\"),\n          secondDosesDone: 0,\n          firstDosesDone: 0,\n          secondDosesCarryOverFromPreviousDay: 0,\n          secondDosesNewFromDay: 0,\n          spareCapacity: 0,\n          secondDosesDue: 0,\n          cumFirstDoses: 0,\n          cumSecondDoses: 0,\n          predicted: true,\n          week: moment(startDate.clone().add(i, \"days\")).week(),\n          year: moment(startDate.clone().add(i, \"days\")).format(\"YYYY\"),\n        };\n      }\n      let keys = Object.keys(debtData_);\n      const endDate = keys[keys.length - 1];\n\n      // Add 2nd doses data from before start of daily data releases\n      // Daily releases started on 2021-01-10\n      // Take the cumulative on\n      const SecondDosesToAdd = 2286572 - 391399;\n      const DaysDifference = Math.abs(\n        moment(\"2020-12-08\").diff(moment(\"2021-01-09\"), \"days\")\n      );\n      const SecondDosesToAddPerDay = SecondDosesToAdd / DaysDifference;\n\n      for (let i = 0; i <= DaysDifference; i++) {\n        let date = moment(\"2020-12-08\").add(i, \"days\");\n        let targetDate = date.add(12, \"weeks\").format(\"YYYY-MM-DD\");\n\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue += SecondDosesToAddPerDay;\n      }\n\n      // Project initial data forward\n      parsedData.map((datum) => {\n        let targetDate = moment(datum[\"date\"])\n          .add(12, \"weeks\")\n          .format(\"YYYY-MM-DD\");\n\n        // Only add if date falls in existing debt data\n        if (debtData_[targetDate])\n          debtData_[targetDate].secondDosesDue +=\n            datum.newPeopleVaccinatedFirstDoseByPublishDate;\n      });\n\n      // We need to make sure that we are not double-counting second doses if they have been done before the 12 weeks delay\n      // We computed what was expected\n      const dateTwelveWeeksAgo = moment(parsedData[parsedData.length - 1].date)\n        .subtract(12, \"weeks\")\n        .format(\"YYYY-MM-DD\");\n\n      const dataTwelveWeeksAgo = parsedData.filter(\n        (item) => item.date === dateTwelveWeeksAgo\n      );\n      const expectedSecondDoses =\n        dataTwelveWeeksAgo[0].cumPeopleVaccinatedFirstDoseByPublishDate;\n      const secondDosesDiscrepancies = Math.abs(\n        expectedSecondDoses -\n          parsedData[parsedData.length - 1]\n            .cumPeopleVaccinatedSecondDoseByPublishDate\n      );\n\n      let subtractedSecondDoses = 0;\n      let index = 0;\n      const fractionToSubtract = 0.04;\n      keys = Object.keys(debtData_);\n\n      // We subtract the discrepencies\n      while (subtractedSecondDoses <= secondDosesDiscrepancies) {\n        if (\n          debtData_[keys[index]].secondDosesDue >=\n          Math.round(fractionToSubtract * secondDosesDiscrepancies)\n        ) {\n          debtData_[keys[index]].secondDosesDue -= Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n          subtractedSecondDoses += Math.round(\n            fractionToSubtract * secondDosesDiscrepancies\n          );\n        }\n\n        index++;\n      }\n\n      let carryOver = 0;\n      let cumFirstDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedFirstDoseByPublishDate;\n      let cumSecondDoses =\n        parsedData[parsedData.length - 1]\n          .cumPeopleVaccinatedSecondDoseByPublishDate;\n\n      const maxDoses = 53000000;\n\n      let allDosesRate;\n      if (rateForPredictions) allDosesRate = rateForPredictions;\n      else allDosesRate = RATE;\n\n      if (!currentRateForPredictions) {\n        setCurrentRateForPredictions(allDosesRate);\n        setRateForPredictions(allDosesRate);\n      }\n\n      let dateAllFirstDosesDone = null;\n\n      Object.entries(debtData_).forEach((entry, index) => {\n        const [key, value] = entry;\n\n        let secondDosesDue = value.secondDosesDue + carryOver;\n\n        value.carryOver = carryOver;\n\n        let secondDosesDone = 0;\n        let firstDosesDone = 0;\n\n        // If all first doses done --> prioritize second doses\n        if (cumFirstDoses >= maxDoses && cumSecondDoses <= maxDoses) {\n          // We only start all doses possible after 3 weeks following the last 1st dose administered\n          if (moment(value.date).diff(dateAllFirstDosesDone, \"days\") >= 21) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        } else if (cumSecondDoses <= maxDoses) {\n          // If more doses due that the rate\n          // --> second doses done are equal to the rate\n          if (secondDosesDue > allDosesRate) {\n            secondDosesDone = allDosesRate;\n          } else {\n            secondDosesDone = secondDosesDue;\n          }\n        }\n\n        // Never allow second doses to overtake first doses\n        const maxSecondDoses = cumFirstDoses - cumSecondDoses;\n\n        if (cumSecondDoses + secondDosesDone > cumFirstDoses) {\n          secondDosesDone = Math.min(maxSecondDoses, secondDosesDone);\n        }\n\n        carryOver = Math.max(secondDosesDue - secondDosesDone, 0);\n        carryOver = Math.min(cumFirstDoses - cumSecondDoses, carryOver);\n        carryOver = Math.max(carryOver, 0);\n\n        let spareCapacity = Math.max(allDosesRate - secondDosesDone, 0);\n\n        if (spareCapacity > 0 && cumFirstDoses <= maxDoses) {\n          firstDosesDone = spareCapacity;\n\n          let targetDate = moment(value.date)\n            .add(12, \"weeks\")\n            .format(\"YYYY-MM-DD\");\n\n          if (targetDate in debtData_)\n            debtData_[targetDate].secondDosesDue += firstDosesDone;\n          else console.log(targetDate);\n        }\n\n        cumFirstDoses = cumFirstDoses + firstDosesDone;\n        cumSecondDoses = cumSecondDoses + secondDosesDone;\n\n        if (cumFirstDoses >= maxDoses && !dateAllFirstDosesDone)\n          dateAllFirstDosesDone = moment(value.date);\n\n        value.firstDosesDone = firstDosesDone;\n        value.secondDosesDone = secondDosesDone;\n        value.cumFirstDoses = cumFirstDoses;\n        value.cumSecondDoses = cumSecondDoses;\n      });\n\n      // const debtDataToPlot = [];\n\n      const debtDataToPlot = parsedData.map((datum) => {\n        return {\n          date: datum.date,\n          week: moment(datum.date).week(),\n          cumFirstDoses: datum.cumPeopleVaccinatedFirstDoseByPublishDate,\n          cumSecondDoses: datum.cumPeopleVaccinatedSecondDoseByPublishDate,\n          firstDosesDone: datum.newPeopleVaccinatedFirstDoseByPublishDate,\n          secondDosesDone: datum.newPeopleVaccinatedSecondDoseByPublishDate,\n          predicted: false,\n        };\n      });\n\n      for (const [key, value] of Object.entries(debtData_)) {\n        debtDataToPlot.push(value);\n      }\n\n      // console.log(\n      //   parsedData[parsedData.length - 1]\n      //     .cumPeopleVaccinatedSecondDoseByPublishDate +\n      //     _.sumBy(debtDataToPlot, \"secondDosesDue\")\n      // );\n\n      setDebtData(debtDataToPlot);\n      setWeeklyDebtData(convertToWeeklyData(debtDataToPlot));\n\n      // Compute statistics for 1st and 2nd doses\n      setStatistics(computeStatistics(parsedData));\n\n      setLoading(false);\n    }\n  }, [parsedData, rateForPredictions]);\n\n  console.log(loading);\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\" textAlign=\"center\">\n          <Image src={logo} circular bordered />\n          <Header.Content>Vaccine Tracker UK</Header.Content>\n          <Header.Subheader>\n            Visualisations to make sense of UK's COVID vaccine rollout\n          </Header.Subheader>\n        </Header>\n        <Message info>\n          <Message.Header>Last Updated: {updateDate}</Message.Header>\n          <p>\n            This website is updated daily around 4pm BST (if delayed, check our{\" \"}\n            <a href=\"https://twitter.com/VaccineStatusUK\">\n              Twitter <Icon name=\"twitter\" />\n              account\n            </a>{\" \"}\n            for more information)\n          </p>\n        </Message>\n        <Segment raised size=\"large\">\n          <Header as=\"h2\" dividing>\n            <Icon name=\"question circle\" />\n            <Header.Content>\n              About\n              <Header.Subheader>\n                What is this website? What is it for?\n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Segment basic size=\"large\">\n            The aim of this website is to provide up-to-date visualisations to\n            help better understand the progress of the UK's COVID vaccine\n            rollout programme.\n            <br />\n            <List bulleted size=\"medium\">\n              <List.Item>\n                This website is best viewed on a desktop, though we are doing\n                our best to make it work as well as possible on mobile devices.\n              </List.Item>\n              <List.Item>\n                Data kindly provided by{\" \"}\n                <a href=\"https://coronavirus.data.gov.uk/\">\n                  Public Health England\n                </a>{\" \"}\n                (thank you for your hard work! 🤗)\n              </List.Item>\n              <List.Item>\n                We provide daily updates on{\" \"}\n                <a href=\"https://twitter.com/VaccineStatusUK\">\n                  Twitter <Icon name=\"twitter\" />\n                </a>\n              </List.Item>\n              <List.Item>\n                We build in the open, check out our{\" \"}\n                <a href=\"https://github.com/nicjac/vaccine-tracker-uk\">\n                  Github\n                  <Icon name=\"github\" />\n                  repository!\n                </a>\n              </List.Item>\n            </List>\n          </Segment>\n        </Segment>\n\n        <PredictedTimeline parsedData={parsedData} debtData={debtData} />\n\n        <Header as={\"h2\"}>\n          <Header.Content>📊 Data Analysis and Visualisations</Header.Content>\n          <Header.Subheader>\n            Data exploration, statistics, and visualisations solely based on\n            historical data. No predictions or projections involved.\n          </Header.Subheader>\n        </Header>\n\n        {showTweets &&\n          statistics &&\n          generateTweetHistoricalData(parsedData, statistics, updateDate)}\n\n        <GenericContainer\n          ChildComponent={\n            <StatisticsOverall\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"Overall Progress 💉 \"\n          description=\"Key figures for overall progress of vaccine roll-out\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsCombinedDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"1️⃣ + 2️⃣ All Doses\"\n          description=\"Combined figures for 1st and 2nd doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsFirstDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"1️⃣ First Doses\"\n          description=\"Figures for 1st doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={\n            <StatisticsSecondDoses\n              parsedData={parsedData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n              statistics={statistics}\n            />\n          }\n          title=\"2️⃣ Second Doses\"\n          description=\"Figures for 2nd doses\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<VaccinationProgressPlot parsedData={parsedData} />}\n          title=\"Rollout Tracker\"\n          description=\"Breakdown of the overall COVID vaccine rollout in the UK for 1st and 2nd doses.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <GenericContainer\n          ChildComponent={<DailyRatesPlot parsedData={parsedData} />}\n          title=\"Daily Vaccination Rates\"\n          description=\"Daily vaccination rates for 1st and 2nd doses since 11 January 2021. Dashed contours indicate weekend days.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n        <Header as={\"h2\"}>\n          <Header.Content>🔮 Projections and Predictions</Header.Content>\n          <Header.Subheader>\n            Projections and predictions using various models and statistical\n            techniques. Those figures and visualisations are indicative only,\n            and are always subject to change when new data becomes available.\n          </Header.Subheader>\n        </Header>\n        <Segment>\n          <Header as={\"h4\"}>\n            <Header.Content>Prediction Parameters</Header.Content>\n            <Header.Subheader>\n              Update the parameters used for the predictions below.\n            </Header.Subheader>\n          </Header>\n          Combined rate:{\" \"}\n          <Dropdown\n            options={options}\n            selection\n            select\n            defaultValue={currentRateForPredictions}\n            value={rateForPredictions}\n            onChange={(a, b) => {\n              setLoading(true);\n              setRateForPredictions(b.value);\n            }}\n            loading={loading}\n          />\n        </Segment>\n        {/* <GenericContainer\n          ChildComponent={\n            <ScoreCardGroupWithDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              showTweets={showTweets}\n              dateUpdated={updateDate}\n            />\n          }\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. These predictions take into account the impact of the second doses debt. It is assumed that the rate is constant (equal to the last 7-day average for 1st and 2nd doses).\n          A strict 12-week delay is introduced between 1st and 2nd doses. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        /> */}\n        <GenericContainer\n          ChildComponent={\n            <SecondDoseDebt\n              parsedData={parsedData}\n              debtData={debtData}\n              weeklyDebtData={weeklyDebtData}\n              rateForPredictions={rateForPredictions}\n            />\n          }\n          title=\"Projected Timeline\"\n          description=\"Projected timeline taking into account the second doses debt. A strict 12-week delay is introduced between 1st and 2nd doses until all 1st doses are administered, after which 2nd doses are done as soon as possible regardless of the delay. 2nd doses always take priority.\"\n          dateUpdated={updateDate}\n          loading={loading}\n        />\n\n        {/* <GenericContainer\n          ChildComponent={<ScoreCardGroup parsedData={parsedData} />}\n          title=\"Government Target Scorecard\"\n          description=\"Keeping track of the government targets. The dates and number of individuals are based on the UK COVID-19 Delivery Plan and the explainer by the Institute For Government. Prediction based on a 7-day vaccination rate average. The bar plots show deviation from target over time.\"\n          dateUpdated={updateDate}\n        /> */}\n\n        {/* <GenericContainer\n          ChildComponent={<StackedVaccinationPlot parsedData={parsedData} />}\n          title=\"Cumulative Doses Administered Over Time\"\n          description=\"Cumulative first and second doses administered since 11 January\n          2021.\"\n          dateUpdated={updateDate}\n        /> */}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}